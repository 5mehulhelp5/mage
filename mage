#!/bin/bash

# Mage is a collection of easy commands and aliases for bin/magento
# For those who hate typing long shell commands

# Global variables
RESET='\033[0m'
BOLD='\033[1m'
ITALIC='\033[3m'
RED='\033[0;31m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'

GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
ADMINNAME="$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
ADMINPASS="admin123$"

WARDEN=0
MAGENTO_CLI="bin/magento"
MAGERUN_CLI=""
REDIS_CLI="redis-cli"
VARNISH_CLI="varnishadm" # We never use varnish on a local machine, and prefer to never use it
COMPOSER_CLI="composer"
OPEN_CLI="xdg-open" # Linux
GET_CLI="wget" # Linux

# OSX
if [[ "$OSTYPE" == "darwin"* ]]; then
  OPEN_CLI="open"
  GET_CLI="curl -O"
fi

# Check if this is the Magento 2 root
if [[ ! -d app/etc ]]; then
  # Allow the following commands to run, even if the folder is not root Magento,
  # if else exit mage
  if [[ $1 != "help" ]] && [[ $1 != "self-update" ]]; then
    echo "This does not look like the Magento 2 root folder, aborting.." && exit 1
  fi
fi

# Magerun
NO_MAGERUN_MSG="Magerun2 is not installed"
if command -v magerun2 &>/dev/null; then
  MAGERUN_CLI="magerun2"
elif command -v n98-magerun2 &>/dev/null; then
  MAGERUN_CLI="n98-magerun2"
fi

# Warden Support
if [ -f .env ] && grep -q "WARDEN_ENV_NAME" .env && [[ ! "$PATH" == /var/www/html* ]]; then
  WARDEN=1
  MAGENTO_CLI="warden env exec php-fpm bin/magento"
  MAGERUN_CLI="warden env exec php-fpm n98-magerun"
  REDIS_CLI="warden env exec redis redis-cli"
  VARNISH_CLI="warden env exec -T varnish varnishadm"
  COMPOSER_CLI="warden env exec php-fpm composer"
fi

function mage_build() {
  local jobs=4

  # Frontend variables with default values
  local langs="en_US nl_NL"
  local default_args="$langs $jobs"
  local args=""

  # Admin variables with default values
  local admin_default_args="en_US $jobs"
  local admin_args="en_US"

  for option in "${@}"; do
    if [[ "$option" =~ ^a: ]]; then
      # Extract argument after 'a:' (remove prefix)
      local stripped_option=${option#a:}
      local admin_args="$admin_args $stripped_option"
    else
      local args="$args $option"
    fi
  done

  # If language is not found in ARGS add the default
  if [[ $args != *_* ]]; then
    local args="$langs $args"
  fi

  # If Jobs is not found in ARGS add the default
  if [[ "$args" != *"-j"* ]] || [[ "$args" != *"--jobs"* ]]; then
    local args="$args -j $jobs"
  fi

  # If Jobs is not found in ADMIN_ARGS add the default
  if [[ "$admin_args" != *"-j"* ]] || [[ "$admin_args" != *"--jobs"* ]]; then
    local admin_args="$admin_args -j $jobs"
  fi

  # If force is found in ARGS add it to both Frontend and Admin args
  if [[ "$args" == *"-f"* ]] || [[ "$args" == *"--force"* ]]; then
    local admin_args="$admin_args -f"
  fi

  # Deploy static content
  $MAGENTO_CLI setup:static-content:deploy -a adminhtml ${admin_args:-$admin_default_args} &&
  $MAGENTO_CLI setup:static-content:deploy -a frontend ${args:-$default_args}
}

# Helper to format language inputs
function mage_lang_format_arguments() {
  formatted_args=""
  for arg in "$@"; do
    formatted_arg=$(tr '[a-z]' '[A-Z]' <<< "$arg")
    formatted_arg="${formatted_arg// /}"
    formatted_args="${formatted_args},${formatted_arg}"
  done
  formatted_args="${formatted_args:1}"
  echo "$formatted_args"
}

# Creates a file/folder and echo the contents in one command
function mage_make_file() {
  touch $1

  if [[ $2 == "rsync" ]]; then
    if [[ -d $3 ]]; then
      rsync -ah ${3}/ ${1} --exclude node_modules
    else
      echo -e "The folder '${3}' does not exists"
    fi
  else
    echo -e $2 >> $1
  fi
}

# Convert string to kebab-case
function mage_kebab_case() {
  echo "${@}" | sed 's/\([A-Z]\)/-\1/g' | tr '[:upper:]' '[:lower:]' | sed -e 's/^-*//' -e 's/-*$//' | tr -s '[:blank:]' '-'
}

# Get the Magento 2 Base Url
function get_mage_base_uri() {
  local baseuri="$($MAGENTO_CLI config:show web/secure/base_url)"
  if [[ -z "${baseuri}" ]]; then
    local baseuri="$($MAGENTO_CLI config:show web/unsecure/base_url)"
  fi
  echo $baseuri
}

# Get specific Magento 2 Store Url
function get_mage_store_uri() {
  local store_url=""

  if [[ -n "$MAGERUN_CLI" ]]; then
    if [[ "$1" == "admin" ]]; then
      store_url=$($MAGERUN_CLI sys:store:config:base-url:list --format csv | grep 1 -m 1 | head -1 | cut -d ',' -f3)
    else
      store_url=$($MAGERUN_CLI sys:store:config:base-url:list --format csv | grep $1 | cut -d ',' -f3)
    fi
  else
    store_url=$(get_mage_base_uri)
  fi

  echo $store_url
}

function mage_add_hyva() {
  echo "Installing Hyva theme..."
  echo "Make sure you have and license key or access to the gitlab env"
  echo "else cancel with Ctrl+C"
  echo ""
  read -e -p "Is this a production setup (use license)? [N/y] "
  echo ""
  if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
    read -e -p "License key: " hyva_key && echo ""
    read -e -p "Packagist url: " hyva_url && echo ""

    $COMPOSER_CLI config --auth http-basic.hyva-themes.repo.packagist.com token $hyva_key
    $COMPOSER_CLI config repositories.private-packagist composer https://hyva-themes.repo.packagist.com/$hyva_url/
    $COMPOSER_CLI require hyva-themes/magento2-default-theme
  else
    local hyva_repos=(
      'hyva-themes/magento2-theme-module'
      'hyva-themes/magento2-reset-theme'
      'hyva-themes/magento2-email-module'
      'hyva-themes/magento2-default-theme'
      'hyva-themes/magento2-compat-module-fallback'
      'hyva-themes/magento2-theme-fallback'
      'hyva-themes/magento2-luma-checkout'
    );

    for i in "${hyva_repos[@]}"; do
      $COMPOSER_CLI config repositories.${i} git git@gitlab.hyva.io:${i}.git
    done

    $COMPOSER_CLI config repositories.hyva-themes/magento2-graphql-tokens git git@github.com:hyva-themes/magento2-graphql-tokens.git
    $COMPOSER_CLI require hyva-themes/magento2-luma-checkout --prefer-source
    $COMPOSER_CLI require hyva-themes/magento2-default-theme --prefer-source
  fi

  $MAGENTO_CLI config:set customer/captcha/enable 0
  $MAGENTO_CLI s:up

  if composer show yireo/magento2-theme-commands >/dev/null 2>&1; then
    $MAGENTO_CLI theme:change Hyva/default
  fi

  echo "Done!"
  echo "Navigate to the Content > Design > Configuration admin section to activate the theme"
  echo ""
  echo "For more see the docs -> https://docs.hyva.io/hyva-themes/getting-started/ "
}

function mage_add_checkout() {
  echo "Installing Hyva checkout..."
  echo "Make sure you have and license key or access to the gitlab env"
  echo "else cancel with Ctrl+C"
  echo ""
  read -e -p "Is this a production setup (use license)? [N/y] "
  echo ""
  if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
    read -e -p "License key: " hyva_key && echo ""
    read -e -p "Packagist url: " HYVA_URL && echo ""

    $COMPOSER_CLI config --auth http-basic.hyva-themes.repo.packagist.com token $hyva_key
    $COMPOSER_CLI config repositories.private-packagist composer https://hyva-themes.repo.packagist.com/$HYVA_URL/
    $COMPOSER_CLI require hyva-themes/magento2-hyva-checkout
  else
    $COMPOSER_CLI config repositories.hyva-themes/hyva-checkout git git@gitlab.hyva.io:hyva-checkout/checkout.git
    $COMPOSER_CLI require hyva-themes/magento2-hyva-checkout --prefer-source
  fi
}

MAGE_VERSION="2.0.0"

function mage_version() {
  echo -e "\n${BOLD}Mage ${GREEN}${MAGE_VERSION}${RESET}"
  echo -e "${ITALIC}See https://github.com/GrimLink/mage for the last version${RESET}\n"
}

function mage_help_cmd() {
  echo -e "- ${BLUE}${1}${RESET} (${2})"
}

function mage_help() {
  echo -e "${BOLD}CMD Options:${RESET}"

  mage_help_cmd "self-update"                     "Update mage"
  mage_help_cmd "info"                            "Show base config for store"
  mage_help_cmd "stores"                          "Show all stores"
  mage_help_cmd "open"                            "Open default store view"
  mage_help_cmd "open admin"                      "Open store admin"
  mage_help_cmd "open [storeview]"                "Open specific store view"
  mage_help_cmd "watch"                           "Run cache-clean.js from mageTV"
  mage_help_cmd "browser-sync"                    "Run browser-sync on default store view"
  mage_help_cmd "browser-sync [storeview]"        "Run browser-sync on specific store view"
  mage_help_cmd "reindex"                         "Reindex all indexes and clear cache"
  mage_help_cmd "purge"                           "Purge all static assets"
  mage_help_cmd "new admin"                       "Create new admin user"
  mage_help_cmd "new customer"                    "Create new customer"
  mage_help_cmd "new theme"                       "Create new theme"
  mage_help_cmd "new module"                      "Create new module"
  mage_help_cmd "new i18n | new translate [src]"  "Create new translations"
  mage_help_cmd "add sample"                      "Add sample data"
  mage_help_cmd "add hyva"                        "Add Hyva Theme"
  mage_help_cmd "add checkout"                    "Add Hyva Checkout"
  mage_help_cmd "set theme [theme]"               "Run yireo theme:change"
  mage_help_cmd "set hyva"                        "Set theme: Hyva default"
  mage_help_cmd "set baldr"                       "Set theme: Siteation Baldr"
  mage_help_cmd "set mode [mode]"                 "Run deploy:mode:set with admin settings for dev"
  mage_help_cmd "set countries [list_countries]"  "Set default store countries for all stores"
  mage_help_cmd "log | log debug"                 "watch the debug log"
  mage_help_cmd "log exception"                   "watch the exception log"
  mage_help_cmd "log system"                      "watch the system log"
  mage_help_cmd "build"                           "Run setup:static-content:deploy with common defaults"
  mage_help_cmd "run"                             "Run magerun2"

  echo -e "\n${ITALIC}Anything else will run ${BLUE}bin/magento${RESET}, ${ITALIC}To view this again, run ${BLUE}mage help${RESET}"
}

function mage_new_in_folder() {
  if [[ ! -d package-source ]]; then
    mkdir package-source
  fi

  read -e -p "Create in package-source as local composer package? [y/N] "
  echo ""
  if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
    echo "package-source";
  else
    echo $1
  fi;
}

function mage_new_theme() {
  local application="frontend"
  local default_parrent_theme="Hyva/default"

  read -e -p "Is this a admin theme? [y/N] "
  echo ""
  if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
    local application="adminhtml"
  fi;

  local dest_path=$(mage_new_in_folder "app/design/${application}")

  read -e -p "Theme Name: " theme_name
  if [[ -z "$theme_name" ]]; then echo "The 'Name' can not be empty" && exit 1; fi

  if [[ "$theme_name" == */* ]]; then
    local theme_vendor="${theme_name%%/*}"
    local theme_name="${theme_name#*\/}"
  else
    read -e -p "Theme Vendor: " theme_vendor
    if [[ -z "$theme_vendor" ]]; then echo "The 'vendor' can not be empty" && exit 1; fi
  fi

  read -e -p "Parrent Theme ($default_parrent_theme): " parrent_theme
  if [[ -z "$parrent_theme" ]]; then parrent_theme=$default_parrent_theme; fi

  local theme_vendor="$(echo "$theme_vendor" | tr -d '[:blank:]')"
  local theme_name="$(echo "$theme_name" | tr -d '[:blank:]')"
  local folder_name="${theme_vendor}/$(mage_kebab_case "$theme_name")"

  local dest_path="$dest_path/$folder_name"
  local file_registration="<?php declare(strict_types=1);\n\nuse Magento\Framework\Component\ComponentRegistrar;\n\nComponentRegistrar::register(ComponentRegistrar::THEME, '${application}/${folder_name}', __DIR__);"
  local file_xml="<theme\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:noNamespaceSchemaLocation=\"urn:magento:framework:Config/etc/theme.xsd\"\n>\n\t<title>${theme_vendor} ${theme_name}</title>\n\t<parent>${parrent_theme}</parent>\n</theme>"

  mkdir -p $dest_path
  if [[ $parrent_theme == Hyva/* ]]; then
    mkdir -p $dest_path/web/tailwind
    mage_make_file $dest_path/web/tailwind rsync vendor/hyva-themes/magento2-default-theme/web/tailwind
  fi

  mage_make_file $dest_path/registration.php "${file_registration}"
  mage_make_file $dest_path/theme.xml "${file_xml}"
}

function mage_new_module() {
  local dest_path=$(mage_new_in_folder "app/code")

  read -e -p "Module Name: " module_name
  if [[ -z "$module_name" ]]; then echo "The 'Name' can not be empty" && exit 1; fi

  if [[ "$module_name" == */* ]]; then
    local module_vendor="${module_name%%/*}"
    local module_name="${module_name#*\/}"
  else
    read -e -p "Module Vendor: " module_vendor
    if [[ -z "$module_vendor" ]]; then echo "The 'vendor' can not be empty" && exit 1; fi
  fi

  local module_vendor="$(echo "$module_vendor" | tr -d '[:blank:]')"
  local module_name="$(echo "$module_name" | tr -d '[:blank:]')"
  local folder_name="${module_vendor}/$(mage_kebab_case "$module_name")"

  local dest_path="$dest_path/$folder_name"
  local file_registration="<?php declare(strict_types=1);\n\nuse Magento\Framework\Component\ComponentRegistrar;\n\nComponentRegistrar::register(ComponentRegistrar::MODULE, '${module_vendor}_${module_name}', __DIR__);"
  local file_xml="<?xml version=\"1.0\"?>\n<config\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"\n>\n\t<module name=\"${module_vendor}_${module_name}\">\n\t\t<sequence>\n\t\t\t<module name=\"Magento_Theme\"/>\n\t\t</sequence>\n\t</module>\n</config>"

  mkdir -p $dest_path/etc
  mage_make_file $dest_path/registration.php "${file_registration}"
  mage_make_file $dest_path/etc/module.xml "${file_xml}"
}

function mage_add_sample() {
  read -e -p "What is your Magento base version (sample: 2.4): " mversion && echo ""
  if [[ -z "$mversion" ]]; then echo "The Magento 2 version is empty, aborting.." && exit 1; fi

  if [[ ! -d "$HOME/.magento-sampledata/$mversion" ]]; then
    git clone -b $mversion git@github.com:magento/magento2-sample-data.git $HOME/.magento-sampledata/$mversion
  fi

  echo -e "Installing $mversion sample data"
  # Lets make sure these folder exist, to prevent them being made as a symlink
  mkdir -p app/code/Magento
  mkdir -p pub/media/catalog/product
  mkdir -p pub/media/downloadable/files
  mkdir -p pub/media/wysiwyg
  touch README.md
  php -f $HOME/.magento-sampledata/$mversion/dev/tools/build-sample-data.php -- --ce-source="$PWD"
  $MAGENTO_CLI setup:upgrade

  # Set theme to Hyva if present
  if composer show hyva-themes/magento2-default-theme >/dev/null 2>&1; then
    if composer show yireo/magento2-theme-commands >/dev/null 2>&1; then
      $MAGENTO_CLI theme:change Hyva/default
    fi
  fi
}

case "${@}" in
"version" | "-v" | "--version")
  mage_version
  ;;

"help")
  mage_version
  mage_help
  ;;

"self-update")
  cd $(dirname "${BASH_SOURCE}") &&
  rm mage &&
  $GET_CLI https://raw.githubusercontent.com/GrimLink/mage/main/mage &&
  chmod +x mage
  ;;

"info")
  $MAGENTO_CLI --version
  echo -e "Base URI: $(get_mage_base_uri)"
  echo -e "Admin URI: $(grep frontName app/etc/env.php | tail -1 | cut -d ">" -f2 | cut -d "'" -f2)"
  echo -e "Database: $(grep dbname app/etc/env.php | tail -1 | cut -d ">" -f2 | cut -d "'" -f2)"
  $MAGENTO_CLI maintenance:status
  $MAGENTO_CLI deploy:mode:show
  if [[ -n "$MAGENTO_CLI config:show catalog/search/engine" ]]; then
    echo -e "Search Engine: $($MAGENTO_CLI config:show catalog/search/engine)"
  fi
  ;;

"stores")
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI sys:store:config:base-url:list --format txt
  else
    echo $NO_MAGERUN_MSG
  fi
  ;;

"open"*)
  store_url=$(get_mage_store_uri ${2:-1})
  admin_path=""

  # Prefetch admin URL data for open steps
  if [[ "$store" == "admin" ]]; then
    admin_path=$(grep frontName app/etc/env.php | tail -1 | cut -d '>' -f2 | cut -d '"' -f2 | cut -d "'" -f2)
  fi

  if [[ -z "$store_url" ]]; then
    echo "Could not find url for store $store"
  else
    echo -e "Opening: ${store_url}${admin_path}"
    $OPEN_CLI ${store_url}${admin_path}
  fi
  ;;

"watch")
  cache_cli="echo cache-clean not installed ( https://github.com/mage2tv/magento-cache-clean ) 'composer global require mage2tv/magento-cache-clean'"
  if command -v vendor/bin/cache-clean.js &> /dev/null; then
    cache_cli="vendor/bin/cache-clean.js --watch"
  elif command -v cache-clean.js &> /dev/null; then
    cache_cli="cache-clean.js --watch"
  fi

  if [[ $WARDEN == 1 ]]; then
    # NOTE: we need to sadly hard code the path,
    # but lukcy we can since the warden container is always the same
    warden env exec php-fpm /home/www-data/.composer/vendor/bin/cache-clean.js -w
  else
    $cache_cli
  fi
  ;;

"browser-sync"*)
  store_url=$(get_mage_store_uri ${2:-1})
  files_to_watch="app/**/*.phtml, app/**/*.xml, app/**/*.css, app/**/*.js"

  if [[ -z "$store_url" ]]; then
    echo "Could not find url for store $store"
  else
    npx browser-sync start --proxy ${store_url} --https --files $files_to_watch
  fi
  ;;

"reindex")
  $MAGENTO_CLI indexer:reindex && $MAGENTO_CLI cache:flush
  ;;

"purge")
  cleantasks=(
    'generated/metadata/*'
    'generated/code/*'
    'pub/static/*'
    'var/cache/*'
    'var/composer_home/*'
    'var/page_cache/*'
    'var/view_preprocessed/*'
  );
  purge_cmd="rm -rf"

  if [[ $WARDEN == 1 ]]; then
    # Run removal within environment, so that changes are in effect immediately.
    # Changes will get synced back to host on MacOS.
    purge_cmd="warden env exec -T php-fpm rm -rf"
  fi;

  for i in "${cleantasks[@]}"; do
    $purge_cmd ${i} &
    echo -e " [${GREEN}✓${RESET}] ${i}"
  done

  if command -v $REDIS_CLI >/dev/null 2>&1; then
    $REDIS_CLI flushall > /dev/null 2>&1
    echo -e " [${GREEN}✓${RESET}] Redis caches flushed"
  fi

  if command -v $VARNISH_CLI >/dev/null 2>&1; then
    $VARNISH_CLI 'ban req.url ~ .' > /dev/null 2>&1
    echo -e " [${GREEN}✓${RESET}] Varnish caches flushed"
  fi
  ;;

"new admin")
  read -e -p "Email (${GITEMAIL}) or: " useremail
  read -e -p "Firstname (${GITNAME}) or: " userfirst
  read -e -p "Lastname (admin) or: " userlast
  read -e -p "User name (${ADMINNAME}) or: " username
  read -sp "Password (${ADMINPASS}) or: " userpass

  $MAGENTO_CLI admin:user:create \
    --admin-user="${username:-$ADMINNAME}" \
    --admin-password="${userpass:-$ADMINPASS}" \
    --admin-email="${useremail:-$GITEMAIL}" \
    --admin-firstname="${userfirst:-$GITNAME}" \
    --admin-lastname="${userlast:-"admin"}"
  ;;

"new customer")
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI customer:create
  else
    echo $NO_MAGERUN_MSG
  fi
  ;;

"new theme")
  mage_new_theme
  ;;

"new module")
  mage_new_module
  ;;

"new i18n"* | "new translate"*)
  src=${3:-.}

  if [[ ! -f "$src/registration.php" ]]; then
    echo "This does not look like a Magento 2 module or theme"
    read -e -p "Are you sure if you want to continue? [y/N] "
    echo ""
    if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
      echo "Running '$MAGENTO_CLI i18n:collect-phrases' in '$src'"
    else
      exit 1
    fi;
  fi

  mkdir -p $src/i18n
  $MAGENTO_CLI i18n:collect-phrases $src -o $src/i18n/temp.csv
  sed -i '' -e 's/^\([^"].*\),\([^"].*\)$/"\1","\2"/' $src/i18n/temp.csv
  sort -o $src/i18n/en_US.csv $src/i18n/temp.csv
  rm $src/i18n/temp.csv
  ;;

"add sample")
  mage_add_sample
  ;;

"add hyva")
  mage_add_hyva
  ;;

"add checkout")
  mage_add_checkout
  ;;

"set theme"*)
  $MAGENTO_CLI theme:change $3
  $MAGENTO_CLI cache:flush;
  ;;

"set hyva")
  mage set theme Hyva/default
  ;;

"set baldr")
  mage set theme Siteation/baldr
  ;;

"set mode"*)
  deploy_mode="developer"
  is_mode_prod=0
  admin_session_lifetime=86400 # 24h in seconds
  admin_password_lifetime=0
  purge_cmd="rm -rf"

  if [[ $WARDEN == 1 ]]; then
    # Run removal within environment, so that changes are in effect immediately.
    # Changes will get synced back to host on MacOS.
    purge_cmd="warden env exec -T php-fpm rm -rf"
  fi;

  if [[ $3 == "production" ]] || [[ $3 == "prod" ]]; then
    deploy_mode="production --skip-compilation"
    is_mode_prod=1
    admin_session_lifetime=43200 # 12h in seconds
    admin_password_lifetime=90 # days
    echo "Also make sure to run 'mage build' or 'bin/magento setup:static-content:deploy', when running production mode"
  else
    $purge_cmd generated/metadata/*
    $purge_cmd generated/code/*
  fi

  $MAGENTO_CLI config:set -q dev/static/sign $is_mode_prod
  $MAGENTO_CLI config:set -q admin/captcha/enable $is_mode_prod
  $MAGENTO_CLI config:set -q admin/security/session_lifetime $admin_session_lifetime
  $MAGENTO_CLI config:set -q admin/security/password_lifetime $admin_password_lifetime
  $MAGENTO_CLI config:set -q admin/security/password_is_forced $is_mode_prod
  $MAGENTO_CLI deploy:mode:set $deploy_mode
  ;;

"set countries"*)
  default_country="NL"
  default_countries="NL,BE,LU,DE"
  countries="$(mage_lang_format_arguments ${@:3})"
  country=$(echo "${3:-$default_country}" | cut -d ',' -f 1 | tr '[:lower:]' '[:upper:]')

  if [[ -z "$countries" ]]; then
    countries="$default_countries"
  fi

  $MAGENTO_CLI general/country/default - $country
  $MAGENTO_CLI general/country/allow - $countries
  $MAGENTO_CLI general/country/destinations - $countries
  ;;

"log" | "log debug")
  tail -f -n 4 var/log/debug.log
  ;;

"log exception")
  tail -f -n 8 var/log/exception.log
  ;;

"log system")
  tail -f -n 8 var/log/system.log
  ;;

"build"*)
  mage_build ${@:2}
  ;;

"run"*)
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI ${@:2}
  else
    echo $NO_MAGERUN_MSG
  fi
  ;;

*)
  $MAGENTO_CLI $@
  ;;
esac

