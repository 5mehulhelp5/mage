#!/bin/bash

# Mage is collection of easy cmd's and alias for bin/magento
# For those that hate typing long shell cmd's

# Exit early, if not Magento 2
if [[ ! -d app/etc ]]; then
  echo "This does not look like the Magento 2 root folder, aborting.." && exit 1;
fi


RESET='\033[0m'
BOLD='\033[1m'
ITALIC='\033[3m'
RED='\033[0;31m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'

VERSION="1.8.0"
GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
ADMINNAME="admin_$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
SKIP="false"

WARDEN=0
MAGENTO_CLI="bin/magento"
MAGERUN_CLI=""
REDIS_CLI="redis-cli"
OPEN_CLI="xdg-open" # Linux

# OSX
if [[ "$OSTYPE" == "darwin"* ]]; then
  OPEN_CLI="open"
fi

if command -v magerun2 &>/dev/null; then
  MAGERUN_CLI="magerun2"
elif command -v n98-magerun2 &>/dev/null; then
  MAGERUN_CLI="n98-magerun2"
fi

if [ -f .env ] && grep --silent 'WARDEN_ENV_NAME' .env; then
  WARDEN=1
  MAGENTO_CLI="warden env exec php-fpm bin/magento"
  MAGERUN_CLI="warden env exec php-fpm n98-magerun"
  REDIS_CLI="warden env exec redis redis-cli"
fi

function helpMessage() {
  echo ""
  echo -e "${BOLD}Mage ${GREEN}${VERSION}${RESET}"
  echo -e "${ITALIC}See https://github.com/GrimLink/mage for the last version${RESET}\n"
  echo -e "${BOLD}CMD Options:${RESET}"
  echo -e "- ${BLUE}info${RESET}         (Show base config for store)"
  echo -e "- ${BLUE}open${RESET}         (Open store in browser)"
  echo -e "- ${BLUE}auth${RESET}         (Copy the auth.json from root)"
  echo -e "- ${BLUE}config${RESET}       (Set configs for dev env)"
  echo -e "- ${BLUE}purge${RESET}        (Purge all static assets)"
  echo -e "- ${BLUE}new-admin${RESET}    (Create new admin user)"
  echo -e "- ${BLUE}new-customer${RESET} (Create new customer)"
  echo -e "- ${BLUE}new-theme${RESET}    (Create new theme in app)"
  echo -e "- ${BLUE}new-module${RESET}   (Create new module in app)"
  echo -e "- ${BLUE}add-sample${RESET}   (Add sample data)"
  echo -e "- ${BLUE}add-hyva${RESET}     (Add hyva theme)"
  echo -e "- ${BLUE}replace${RESET}      (Removal of (optional) core modules)"
  echo -e "- ${BLUE}run${RESET}          (Run magerun2)"
  echo -e "\n${ITALIC}Anything else will run ${BLUE}bin/magento${RESET}"
  echo -e "${ITALIC}To see those cmd's just run ${BLUE}mage${RESET}"
}

function newMagentoMod() {
  if [[ "$2" == "--yes" ]] || [[ "$2" == "-y" ]]; then SKIP="true"; fi
  
  read -p "Vendor: " VENDOR
  if [[ -z "$VENDOR" ]]; then echo "The 'Vendor' can not be empty" && exit 1; fi

  read -p "Name: " NAME
  if [[ -z "$NAME" ]]; then echo "The 'Name' can not be empty" && exit 1; fi

  TAB="    "
  VENDOR="$(echo $VENDOR | tr '[:upper:]' '[:lower:]' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1' | tr -d '[:blank:]')";
  CAMEL_NAME="$(echo $NAME | tr '[:upper:]' '[:lower:]' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1' | tr -d '[:blank:]')";
  LOWER_NAME="$(tr '[:upper:][:blank:]' '[:lower:]-' <<< ${NAME})";
  MOD_PATH="app/code/$VENDOR/${CAMEL_NAME}"

  if [[ $1 == "theme" ]]; then
    if [[ $SKIP == "false" ]]; then
      read -p "Folder (${LOWER_NAME}-theme) or: " FOLDER
      read -p "Parent (${VENDOR}/blank) or: " PARENT
    fi
  
    if [[ -z "$FOLDER" ]]; then FOLDER="${LOWER_NAME}-theme"; fi
    if [[ -z "$PARENT" ]]; then PARENT="${VENDOR}/blank"; fi
  
    MOD_PATH="app/design/frontend/$VENDOR/${FOLDER}"
    mkdir -p $MOD_PATH

    touch $MOD_PATH/registration.php &&
    echo -e "<?php declare(strict_types=1);\n\nuse Magento\Framework\Component\ComponentRegistrar;\n\nComponentRegistrar::register(\n${TAB}ComponentRegistrar::THEME,\n${TAB}'frontend/${VENDOR}/${FOLDER}',\n${TAB}__DIR__\n);" >> $MOD_PATH/registration.php

    touch $MOD_PATH/theme.xml &&
    echo -e "<theme\n${TAB}xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n${TAB}xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Config/etc/theme.xsd\">\n${TAB}<title>${VENDOR} ${CAMEL_NAME}</title>\n${TAB}<parent>${PARENT}</parent>\n</theme>" >> $MOD_PATH/theme.xml
  else
    mkdir -p $MOD_PATH/etc

    touch $MOD_PATH/registration.php &&
    echo -e "<?php declare(strict_types=1);\n\nuse Magento\Framework\Component\ComponentRegistrar;\n\nComponentRegistrar::register(\n${TAB}ComponentRegistrar::MODULE,\n${TAB}'${VENDOR}_${CAMEL_NAME}',\n${TAB}__DIR__\n);" >> $MOD_PATH/registration.php

    touch $MOD_PATH/etc/module.xml &&
    echo -e "<?xml version=\"1.0\"?>\n<config\n${TAB}xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n${TAB}xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\">\n${TAB}<module name=\"${VENDOR}_${CAMEL_NAME}\" setup_version=\"1.0.0\">\n${TAB}${TAB}<sequence>\n${TAB}${TAB}${TAB}<module name=\"Magento_Theme\"/>\n${TAB}${TAB}</sequence>\n${TAB}</module>\n</config>" >> $MOD_PATH/etc/module.xml
  fi
}

case "${1}" in
help)
  helpMessage
  ;;

info)
  $MAGENTO_CLI --version
  echo -e "Base URI: $($MAGENTO_CLI config:show web/secure/base_url)"
  echo -e "Admin URI: $(grep frontName app/etc/env.php | tail -1 | cut -d ">" -f2 | cut -d "'" -f2)"
  echo -e "Database: $(grep dbname app/etc/env.php | tail -1 | cut -d ">" -f2 | cut -d "'" -f2)"
  $MAGENTO_CLI maintenance:status
  $MAGENTO_CLI deploy:mode:show
  ;;

open)
  STORE=${2:-default}
  HTTP="unsecure"
  URL=""

  if [[ "$STORE" == "admin" ]]; then
    ADMIN_PATH="$(grep frontName app/etc/env.php | tail -1 | cut -d ">" -f2 | cut -d "'" -f2)"
    STORE="default"
  fi

  if [[ ! -n "$MAGERUN_CLI" ]]; then
    if [[ "$($MAGENTO_CLI config:show web/secure/use_in_frontend)" == "1" ]]; then
      HTTP="secure"
    fi
  fi
    
  if [[ -n "$MAGERUN_CLI" ]]; then
    STORE_URL=$($MAGERUN_CLI sys:store:config:base-url:list --format csv | grep $STORE | cut -d ',' -f3)
    if [[ "$STORE" == "admin" ]]; then
      URL="${STORE_URL}${ADMIN_PATH}"
    else
      URL="${STORE_URL}"
    fi
  elif [[ "$STORE" == "admin" ]]; then
    URL="$($MAGENTO_CLI config:show web/${HTTP}/base_url)${ADMIN_PATH}"
  else
    URL="$($MAGENTO_CLI config:show web/${HTTP}/base_url)"
  fi

  if [[ -z "$URL" ]]; then
    echo "Could not find url for store $STORE"
  else
    echo "Opening url $URL" && $OPEN_CLI $URL
  fi
  ;;

auth)
  if [[ -e auth.json ]]; then
    echo "Auth key already set"
  elif [[ -e var/composer_home/auth.json ]]; then
    echo "Getting auth from var/composer_home"
    cp var/composer_home/auth.json auth.json
  else
    echo "Copying composer authentication"
    test -f ~/.composer/auth.json &&
    cp ~/.composer/auth.json var/composer_home/auth.json
  fi
  ;;

"config")
  $MAGENTO_CLI cache:disable layout block_html full_page
  echo "Setting session lifetime 86400"
  $MAGENTO_CLI config:set admin/security/session_lifetime 86400
  echo "Setting admin password lifetime ∞"
  $MAGENTO_CLI config:set admin/security/password_lifetime ""
  ;;

purge)
  CLEANTASKS=(
    'pub/static/*'
    'generated/*'
    'var/cache/*'
    'var/composer_home/*'
    'var/page_cache/*'
    'var/view_preprocessed/*'
  );

  for i in "${CLEANTASKS[@]}"; do
    if [[ $WARDEN == 1 ]]; then
        # Run removal within environment, so that changes are in effect immediately.
        # Changes will get synced back to host on MacOS.
        warden env exec -T php-fpm rm -rf ${i} &
    else
        rm -rf ${i} &
    fi
    echo -e " [${GREEN}✓${RESET}] ${i}"
  done

  $MAGENTO_CLI cache:flush > /dev/null 2>&1
  echo -e " [${GREEN}✓${RESET}] caches flushed"
  
  if [[ "$2" == "--redis" ]] || [[ "$2" == "-r" ]]; then
    $REDIS_CLI flushall > /dev/null 2>&1
    echo -e " [${GREEN}✓${RESET}] Redis caches flushed"
  fi
  
  ;;

new-admin)
  if [[ "$2" == "--yes" ]] || [[ "$2" == "-y" ]]; then
    SKIP="true"
  fi

  if [[ $SKIP == "false" ]]; then
    read -p "Email (${GITEMAIL}) or: " USEREMAIL
    read -p "Firstname (${GITNAME}) or: " USERFIRST
    read -p "Lastname (admin) or: " USERLAST
    read -p "User name (${ADMINNAME}) or: " USERNAME
    read -sp "Password (admin123) or: " USERPASS
  fi

  if [[ -z "$USEREMAIL" ]]; then USEREMAIL="$GITEMAIL"; fi
  if [[ -z "$USERFIRST" ]]; then USERFIRST="$GITNAME"; fi
  if [[ -z "$USERLAST" ]]; then USERLAST="admin"; fi
  if [[ -z "$USERNAME" ]]; then USERNAME="${ADMINNAME}"; fi
  if [[ -z "$USERPASS" ]]; then USERPASS="admin123"; fi

  $MAGENTO_CLI admin:user:create --admin-user="${USERNAME}" \
    --admin-password="${USERPASS}" --admin-email="${USEREMAIL}" \
    --admin-firstname="${USERFIRST}" --admin-lastname="${USERLAST}"
  ;;

new-customer)
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI customer:create
  else
    echo "Magerun2 is not installed"
  fi
  ;;

new-theme)
  newMagentoMod "theme"
  ;;

new-module)
  newMagentoMod "module"
  ;;

add-sample)
  read -p "What is your Magento base version (sample: 2.4): " MVERSION && echo ""
  if [[ -z "$MVERSION" ]]; then echo "The Magento 2 version is empty, aborting.." && exit 1; fi

  if [[ ! -d "$HOME/.magento-sampledata/$MVERSION" ]]; then
    git clone -b $MVERSION git@github.com:magento/magento2-sample-data.git $HOME/.magento-sampledata/$MVERSION
  fi
  
  echo -e "Installing $MVERSION sample data"
  # Lets make sure these folder exist, to prevent them being made as a symlink
  mkdir -p app/code/Magento
  mkdir -p pub/media/catalog/product
  mkdir -p pub/media/downloadable/files
  mkdir -p pub/media/wysiwyg
  touch README.md
  # This will also run bin/magento s:up
  php -f $HOME/.magento-sampledata/$MVERSION/dev/tools/build-sample-data.php -- --ce-source="$PWD"
  ;;

add-hyva)
  echo "Installing Hyva theme..."
  echo "Make sure you have and license key or access to the gitlab env"
  echo "else cancel with Ctrl+C"
  echo ""
  read -p "Is this a production setup (use license)? [Y/n] "
  echo ""
  if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    read -p "License key: " HYVA_KEY && echo ""
    read -p "Packagist url: " HYVA_URL && echo ""
    composer config --auth http-basic.hyva-themes.repo.packagist.com token $HYVA_KEY
    composer config repositories.private-packagist composer https://hyva-themes.repo.packagist.com/$HYVA_URL/
    composer require hyva-themes/magento2-default-theme
  else
    # hosted on private gitlab:
    composer config repositories.hyva-themes/magento2-theme-module git git@gitlab.hyva.io:hyva-themes/magento2-theme-module.git
    composer config repositories.hyva-themes/magento2-reset-theme git git@gitlab.hyva.io:hyva-themes/magento2-reset-theme.git
    composer config repositories.hyva-themes/magento2-email-module git git@gitlab.hyva.io:hyva-themes/magento2-email-module.git
    composer config repositories.hyva-themes/magento2-default-theme git git@gitlab.hyva.io:hyva-themes/magento2-default-theme.git
    # hosted on public github:
    composer config repositories.hyva-themes/magento2-graphql-tokens git git@github.com:hyva-themes/magento2-graphql-tokens.git

    composer require hyva-themes/magento2-default-theme --prefer-source
  fi

  bin/magento s:up

  echo "Done!"
  echo "Navigate to the Content > Design > Configuration admin section to activate the theme"
  echo "Disbale the following modules:"
  echo " - (Magento 2.4.0 - 2.4.2) Dotdigitalgroup_Email Dotdigitalgroup_Chat Dotdigitalgroup_Sms"
  echo " - (Magento 2.4.3) Dotdigitalgroup_Email Dotdigitalgroup_Chat Dotdigitalgroup_Sms Dotdigitalgroup_ChatGraphQl Dotdigitalgroup_EmailGraphQl"
  echo "And disable the captcha since Hyva does not support the Magento 2 old and default captcha"
  echo "$ bin/magento config:set customer/captcha/enable 0"
  echo ""
  echo "For more see the docs -> https://docs.hyva.io/hyva-themes/getting-started/"
  ;;

replace)
  if [[ ! -f composer.json ]]; then echo "This does not look like the Magento 2 root folder, aborting.." && exit 1; fi
  read -p "What is your Magento sub version (sample: 4.1): " MVERSION && echo ""
  if [[ -z "$MVERSION" ]]; then echo "The Magento 2 version is empty, aborting.." && exit 1; fi
  if [[ -z $2 ]]; then
    echo "No options where given, next time you can also type 'mage replace {{OPTION}}'"
    read -p "What (Yireo) replace packages do you want to use (empty: bundled,content-staging,core,inventory): " OPTIONS && echo ""
  else
    OPTIONS="$2"
  fi
  if [[ -z "$OPTIONS" ]]; then OPTIONS="bundled,content-staging,core,inventory"; fi
  OPTIONS_ARRAY=($(echo $OPTIONS | tr "," "\n"))
  for i in "${OPTIONS_ARRAY[@]}"; do
    OPTION="$OPTION yireo/magento2-replace-${i}:^${MVERSION}"
  done
  composer require $OPTION
  ;;

run)
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI ${@:2}
  else
    echo "Magerun2 is not installed"
  fi
  ;;

*)
  $MAGENTO_CLI $@
  ;;
esac
