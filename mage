#!/usr/bin/env bash

# Mage is a collection of easy commands and aliases for bin/magento
# For those who hate typing long shell commands

MAGE_VERSION="2.4.0"

# Check if this is the Magento 2 root
if [[ ! -d app/etc ]]; then
  case "$1" in
    version|help|self-update|install|setup|create)
      # Allow these commands to run even if not in Magento root
      ;;
    *)
      echo "This does not look like the Magento 2 root folder, aborting.." && exit 1
      ;;
  esac
fi

# Global variables
RESET='\033[0m'
BOLD='\033[1m'
ITALIC='\033[3m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'

GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
ADMINNAME="$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
ADMINEMAIL="${GITEMAIL}"
ADMINPASS="magentoDev123$"

# Load NVM if available, so the node version is the one used by the system
[ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"

# Env Variables
VALET=0
WARDEN=0

MAGENTO_CLI="bin/magento"
MAGERUN_CLI=""
REDIS_CLI="redis-cli"
VARNISH_CLI="varnishadm"
PHP_CLI="php"
COMPOSER_CLI="composer"
NODE_CLI="node"
NPM_CLI="npm"
RSYNC_CLI="rsync"
PURGE_CLI="rm -rf"
OPEN_CLI="xdg-open" # Linux
GET_CLI="wget" # Linux

# OSX Env
if [[ "$OSTYPE" == "darwin"* ]]; then
  OPEN_CLI="open"
  GET_CLI="curl -O"
fi

# Magerun
if command -v magerun2 &>/dev/null && magerun2 --version &>/dev/null; then
  MAGERUN_CLI="magerun2"
elif command -v n98-magerun2 &>/dev/null && n98-magerun2 --version &>/dev/null; then
  MAGERUN_CLI="n98-magerun2"
fi

# Valet Env
if [[ $(valet -V | cut -f1,2 -d ' ') == "Laravel Valet" ]]; then
  VALET=1
fi

# Warden Env
if [ -f .env ] && grep -q "WARDEN_ENV_NAME" .env && [[ ! "$PATH" == /var/www/html* ]]; then
  WARDEN=1
  MAGENTO_CLI="warden env exec php-fpm bin/magento"
  MAGERUN_CLI="warden env exec php-fpm n98-magerun"
  REDIS_CLI="warden env exec redis redis-cli"
  VARNISH_CLI="warden env exec -T varnish varnishadm"
  PHP_CLI="warden env exec php-fpm php"
  COMPOSER_CLI="warden env exec php-fpm composer"
  NODE_CLI="warden env exec php-fpm node"
  NPM_CLI="warden env exec php-fpm npm"
  RSYNC_CLI="warden env exec -T php-fpm rsync"
  # Run removal within environment, so that changes are in effect immediately.
  # Changes will get synced back to the host
  PURGE_CLI="warden env exec -T php-fpm rm -rf"
fi

# Creates a file/folder and echo the contents in one command
function mage_make_file() {
  touch $1

  if [[ $2 == "rsync" ]]; then
    if [[ -d $3 ]]; then
      rsync -ah ${3}/ ${1} --exclude node_modules
    else
      echo -e "The folder '${3}' does not exists"
    fi
  else
    echo -e $2 >> $1
  fi
}

# Convert string to kebab-case
function mage_kebab_case() {
  echo "${@}" | sed 's/\([A-Z]\)/-\1/g' | tr '[:upper:]' '[:lower:]' | sed -e 's/^-*//' -e 's/-*$//' | tr -s '[:blank:]' '-'
}

# Get the Magento 2 Base Url
function get_mage_base_uri() {
  local baseuri="$($MAGENTO_CLI config:show web/secure/base_url)"
  if [[ -z "${baseuri}" ]]; then
    local baseuri="$($MAGENTO_CLI config:show web/unsecure/base_url)"
  fi
  echo $baseuri
}

# Get specific Magento 2 Store Url
function get_mage_store_uri() {
  local store_url=""

  if [[ -n "$MAGERUN_CLI" ]]; then
    if [[ "$1" == "admin" ]]; then
      store_url=$($MAGERUN_CLI sys:store:config:base-url:list --format csv | grep 1 -m 1 | head -1 | cut -d ',' -f3)
    else
      store_url=$($MAGERUN_CLI sys:store:config:base-url:list --format csv | grep $1 | cut -d ',' -f3)
    fi
  else
    store_url=$(get_mage_base_uri)
  fi

  echo $store_url
}

# Get the admin path based on the app/etc/env.php
function get_mage_admin_path_env() {
  php -r '
    $array = include("app/etc/env.php");
    if (isset($array["backend"]["frontName"])) { echo $array["backend"]["frontName"]; }
  ' 2>/dev/null
}

# Get the Magento admin path
function get_mage_admin_path() {
  local admin_path=""
  local admin_custom_path=$($MAGENTO_CLI config:show admin/url/use_custom_path)

  if [[ $admin_custom_path == "1" ]]; then
    local admin_path=$($MAGENTO_CLI config:show admin/url/custom_path)
  else
    local admin_path=$(get_mage_admin_path_env)
  fi

  echo $admin_path
}

function get_composer_pkg_version() {
  echo -e $($COMPOSER_CLI show $1 | grep 'versions' | grep -o -E '\* .+' | awk '{print $2}' | cut -d',' -f1)
}

function get_mage_modules() {
  php -r '
    $config = include "app/etc/config.php";
    if (isset($config["modules"])) {
      $modules = array_filter(array_keys($config["modules"]), function($module) {
        return strpos($module, "Magento_") === false && strpos($module, "PayPal_Braintree") === false;
      });
      echo implode("\n", $modules);
    }
  ' 2>/dev/null
}

function get_mage_module_count() {
  echo $(get_mage_modules | wc -l)
}

function check_has_magerun() {
  if [[ -z "$MAGERUN_CLI" ]]; then
    echo "Magerun2 is not installed or incompatible with current PHP version"
    exit 1
  fi
}

function mage_add_valet_store() {
  local store_name=${1:-'store'}
  local store_code=${2:-'default'}
  local is_commented=${3:-false}

  if [ "$is_commented" = true ]; then
    echo -e "\t// '${store_name}' => ["
    echo -e "\t// \t'MAGE_RUN_CODE' => '${store_code}',"
    echo -e "\t// \t'MAGE_RUN_TYPE' => 'store',"
    echo -e "\t// ],"
  else
    echo -e "\t'${store_name}' => ["
    echo -e "\t\t'MAGE_RUN_CODE' => '${store_code}',"
    echo -e "\t\t'MAGE_RUN_TYPE' => 'store',"
    echo -e "\t],"
  fi
}

function mage_cleanup_sample_files() {
  mkdir -p dev/sample-files
  find . -maxdepth 1 -type f -name "*.sample" -exec mv {} dev/sample-files/ \;
  echo "All files ending with '.sample' have been moved to 'dev/sample-files'"
}

function mage_add_hyva() {
  local use_hyva_production=$1

  if [[ $use_hyva_production =~ ^[yY]|[yY][eE][sS]$ ]]; then
    if [ ! -f "auth.json" ] && [ ! -f "$HOME/.composer/auth.json" ]; then
      read -e -p "No license found, add license? [Y/n] "
      echo ""
      if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
        read -e -p "License key: " hyva_key && echo ""
        $COMPOSER_CLI config --auth http-basic.hyva-themes.repo.packagist.com token $hyva_key
      fi
    fi
    read -e -p "Packagist domain (e.g. acme): " hyva_url && echo ""
    if [[ -z $hyva_url ]]; then hyva_url="hyva-themes"; fi
    $COMPOSER_CLI config repositories.private-packagist composer https://hyva-themes.repo.packagist.com/$hyva_url/

    echo "Installing Hyva theme..."
    $COMPOSER_CLI require hyva-themes/magento2-default-theme
  else
    mage_add_hyva_dev
  fi;

  $MAGENTO_CLI config:set customer/captcha/enable 0
}

function mage_add_hyva_dev() {
  echo "Adding repositories..."

  # Core Theme Deps
  $COMPOSER_CLI config repositories.hyva-themes/magento2-reset-theme git git@gitlab.hyva.io:hyva-themes/magento2-reset-theme.git
  $COMPOSER_CLI config repositories.hyva-themes/magento2-theme-module git git@gitlab.hyva.io:hyva-themes/magento2-theme-module.git
  $COMPOSER_CLI config repositories.hyva-themes/magento2-mollie-theme-bundle git git@gitlab.hyva.io:hyva-themes/hyva-compat/magento2-mollie-theme-bundle.git
  $COMPOSER_CLI config repositories.hyva-themes/magento2-email-module git git@gitlab.hyva.io:hyva-themes/magento2-email-module.git
  # magento2-graphql-tokens Found on: https://packagist.org/packages/hyva-themes/magento2-graphql-tokens
  # magento2-graphql-view-model Found on: https://packagist.org/packages/hyva-themes/magento2-graphql-view-model
  $COMPOSER_CLI config repositories.hyva-themes/magento2-order-cancellation-webapi git git@gitlab.hyva.io:hyva-themes/magento2-order-cancellation-webapi.git
  $COMPOSER_CLI config repositories.hyva-themes/magento2-default-theme git git@gitlab.hyva.io:hyva-themes/magento2-default-theme.git

  # Extra Deps
  $COMPOSER_CLI config repositories.hyva-themes/magento2-default-theme-csp git git@gitlab.hyva.io:hyva-themes/magento2-default-theme-csp.git
  $COMPOSER_CLI config repositories.hyva-themes/magento2-cms-tailwind-jit git git@gitlab.hyva.io:hyva-themes/magento2-cms-tailwind-jit.git
  $COMPOSER_CLI config repositories.hyva-themes/magento2-compat-module-fallback git git@gitlab.hyva.io:hyva-themes/magento2-compat-module-fallback.git
  $COMPOSER_CLI config repositories.hyva-themes/magento2-theme-fallback git git@gitlab.hyva.io:hyva-themes/magento2-theme-fallback.git
  $COMPOSER_CLI config repositories.hyva-themes/magento2-luma-checkout git git@gitlab.hyva.io:hyva-themes/magento2-luma-checkout.git

  # Checkout Deps
  $COMPOSER_CLI config repositories.hyva-themes/hyva-checkout git git@gitlab.hyva.io:hyva-checkout/checkout.git

  # Commerce Deps
  $COMPOSER_CLI config repositories.hyva-themes/commerce git git@gitlab.hyva.io:hyva-commerce/metapackage-commerce.git
  $COMPOSER_CLI config repositories.hyva-themes/commerce-module-commerce git git@gitlab.hyva.io:hyva-commerce/module-commerce.git
  $COMPOSER_CLI config repositories.hyva-themes/commerce-module-cms git git@gitlab.hyva.io:hyva-commerce/module-cms.git
  $COMPOSER_CLI config repositories.hyva-themes/commerce-module-image-editor git git@gitlab.hyva.io:hyva-commerce/module-image-editor.git
  $COMPOSER_CLI config repositories.hyva-themes/commerce-module-admin-theme git git@gitlab.hyva.io:hyva-commerce/module-admin-theme.git
  $COMPOSER_CLI config repositories.hyva-themes/commerce-theme-adminhtml git git@gitlab.hyva.io:hyva-commerce/theme-adminhtml.git
  $COMPOSER_CLI config repositories.hyva-themes/commerce-module-admin-dashboard git git@gitlab.hyva.io:hyva-commerce/module-admin-dashboard.git
  # Dev Deps
  $COMPOSER_CLI config repositories.hyva-themes/commerce-module-admin-dashboard-google-crux-history-widget git git@gitlab.hyva.io:hyva-commerce/module-admin-dashboard-google-crux-history-widget.git
  $COMPOSER_CLI config repositories.hyva-themes/commerce-module-media-optimization git git@gitlab.hyva.io:hyva-commerce/module-media-optimization.git

  echo "Installing Hyva theme..."
  $COMPOSER_CLI require hyva-themes/magento2-default-theme --prefer-source
}

function mage_add_hyva_checkout() {
  echo "Installing Hyva Checkout..."
  $COMPOSER_CLI require hyva-themes/magento2-hyva-checkout
}

function mage_add_hyva_commerce() {
  local use_hyva_production=$1

  echo "Installing Hyva Commerce..."
  if [[ $use_hyva_production =~ ^[yY]|[yY][eE][sS]$ ]]; then
    $COMPOSER_CLI require hyva-themes/commerce
  else
    $COMPOSER_CLI require hyva-themes/commerce-module-cms
    $COMPOSER_CLI require hyva-themes/commerce-module-image-editor
    $COMPOSER_CLI require hyva-themes/commerce-theme-adminhtml
    $COMPOSER_CLI require hyva-themes/commerce-module-admin-dashboard
  fi
}

function mage_build_hyva() {
  if [ ! -d vendor/hyva-themes/magento2-default-theme/web/tailwind/node_modules ]; then
    $NPM_CLI --prefix vendor/hyva-themes/magento2-default-theme/web/tailwind install;
  fi
  $NPM_CLI --prefix vendor/hyva-themes/magento2-default-theme/web/tailwind run build;
}

function mage_version() {
  echo -e "\n${BOLD}Mage ${GREEN}${MAGE_VERSION}${RESET}, ${ITALIC}See https://github.com/GrimLink/mage for the latest version${RESET}\n"
}

function mage_help_cmd() {
  printf "  ${GREEN}%-30s${RESET} %s\n" "$1" "$2"
}

function mage_help_sub_header() {
  echo -e "${BOLD}$1${RESET}"
}

function mage_help() {
  mage_help_sub_header "General"
  mage_help_cmd "self-update"                 "Update mage"
  mage_help_cmd "info"                        "Show base config for store"
  mage_help_cmd "stores"                      "Show all stores"
  mage_help_cmd "modules"                     "Show all install modules"
  mage_help_cmd "outdated"                    "Show all direct outdated composer dependencies"
  mage_help_cmd "run"                         "Run magerun2"

  mage_help_sub_header "Installation"
  mage_help_cmd "create [NAME]"               "Alias for 'mage install' and 'mage setup'"
  mage_help_cmd "install [NAME]"              "Installs a new Magento 2 Project"
  mage_help_cmd "setup [NAME]"                "Configures and sets up the new Magento 2 Project"

  mage_help_sub_header "Development"
  mage_help_cmd "start"                       "Open store and admin with code editor and git client"
  mage_help_cmd "open [STOREVIEW]"            "Open the store view, default if empty"
  mage_help_cmd "open admin"                  "Open store admin"
  mage_help_cmd "watch"                       "Run cache-clean.js"
  mage_help_cmd "browser-sync [STOREVIEW]"    "Run browser-sync on a store view, default if empty"
  mage_help_cmd "reindex"                     "Reindex all indexes and clear cache"
  mage_help_cmd "purge"                       "Purge all static assets"
  mage_help_cmd "log [FILE:debug]"            "watch the log (default: debug)"
  mage_help_cmd "log clear"                   "clear all logs"
  mage_help_cmd "log show"                    "show all logs"
  mage_help_cmd "build"                       "Run setup:static-content:deploy with common defaults"

  mage_help_sub_header "Generators"
  mage_help_cmd "new admin"                   "Create new admin user"
  mage_help_cmd "new customer"                "Create new customer"
  mage_help_cmd "new theme"                   "Create new theme"
  mage_help_cmd "new module"                  "Create new module"
  mage_help_cmd "new patch"                   "Create new patch"
  mage_help_cmd "new i18n/translate [SRC]"    "Create new translations"

  mage_help_sub_header "Add"
  mage_help_cmd "add patch"                   "Add patch"
  mage_help_cmd "add sample"                  "Add sample data"
  mage_help_cmd "add hyva"                    "Add Hyva Theme"
  mage_help_cmd "add checkout"                "Add Hyva Checkout"
  mage_help_cmd "add baldr"                   "Add Siteation Baldr"

  mage_help_sub_header "Configuration"
  mage_help_cmd "set mage-os"                 "Replace Magento2 with Mage-OS distro"
  mage_help_cmd "set theme [THEME]"           "Run yireo theme:change (shorthands: 'hyva', 'breeze' and 'baldr')"
  mage_help_cmd "set fsp [TYPE:default]"      "Set the full page cache to 'default' or 'varnish'"
  mage_help_cmd "set csp"                     "Enable CSP mode for Magento"

  echo -e "\n${ITALIC}Anything else will run ${GREEN}bin/magento${RESET}"
}

function mage_info() {
  local mage_version="$($MAGENTO_CLI --version --ansi | sed 's/ CLI /: /')"
  local hyva_version=""
  local mage_mode=$($MAGENTO_CLI deploy:mode:show)
  local mage_status=$($MAGENTO_CLI maintenance:status)
  local mage_search=$($MAGENTO_CLI config:show catalog/search/engine)
  local mage_mod_count=$(get_mage_module_count)

  if $COMPOSER_CLI show hyva-themes/magento2-theme-module > /dev/null 2>&1; then
    local hyva_version="$(get_composer_pkg_version 'hyva-themes/magento2-theme-module')"
  fi

  if [[ -n $hyva_version ]]; then
    echo -e "$mage_version (Using Hyvä Module ${GREEN}$hyva_version${RESET})"
  else
    echo -e "$mage_version\n"
  fi

  if echo $mage_mode | grep -q "production"; then
    echo -e "- Mode: ${GREEN}Production${RESET}"
  elif echo $mage_mode | grep -q "developer"; then
    echo -e "- Mode: ${YELLOW}Developer${RESET}"
  else
    echo -e "- Mode: ${RED}Default, please switch to another mode${RESET}"
  fi

  if echo $mage_status | grep -q "enabled"; then
    echo -e "- Maintenance: ${RED}ON!${RESET}"
  else
    echo -e "- Maintenance: ${GREEN}OFF${RESET}"
  fi

  echo -e "- Base URI: $(get_mage_base_uri)"
  echo -e "- Admin URI: $(get_mage_base_uri)$(get_mage_admin_path)"
  echo -e "- Database name: $(grep dbname app/etc/env.php | tail -1 | cut -d ">" -f2 | cut -d "'" -f2 | cut -d '"' -f2)"

  if [[ -n "$mage_search" ]]; then
    echo -e "- Search Engine: $mage_search"
  fi

  echo -e "- PHP version: ${GREEN}$($PHP_CLI --version | grep ^PHP | cut -d' ' -f2)${RESET}"
  echo -e "- Node version: ${GREEN}$($NODE_CLI --version | sed 's/v//')${RESET}"
  if (( $mage_mod_count < 25 )); then
    echo -e "- Modules Installed: ${GREEN}$mage_mod_count${RESET}"
  elif (( $mage_mod_count < 50 )); then
    echo -e "- Modules Installed: ${YELLOW}$mage_mod_count${RESET}"
  else
    echo -e "- Modules Installed: ${RED}$mage_mod_count${RESET} (It's recommended to remove some modules for better performance)"
  fi
}

function mage_install() {
  local name="$1"
  local version=""
  local edition=""
  local repository_url=""
  local repository_name=""

  if [[ -z "$name" ]]; then
    echo "The Magento install requires a name!" && exit
  fi

  if [ -e "$name/composer.json" ]; then
    echo -e "$name already exists, aborting.." && exit
  fi

  echo "What Magento edition do you want to use?"
  echo "Options: community, enterprise, mage-os"
  read -p "Edition (community): " edition

  # Set default edition if empty
  if [[ -z "$edition" ]]; then
    edition="community"
  fi

  case "$edition" in
    "community")
      repository_url="https://repo.magento.com/"
      repository_name="magento/project-community-edition"
      ;;
    "enterprise")
      repository_url="https://repo.magento.com/"
      repository_name="magento/project-enterprise-edition"
      ;;
    "mage-os")
      repository_url="https://repo.mage-os.org/"
      repository_name="mage-os/project-community-edition"
      ;;
    *)
      echo "Invalid edition selected. Aborting."
      exit 1
      ;;
  esac

  # See versions at:
  # - https://github.com/mage-os/mageos-magento2
  # - https://experienceleague.adobe.com/docs/commerce-operations/release/versions.html
  read -p "What Magento version do you want to install (empty = latest): " version

  local package_with_version="$repository_name"
  if [[ -n "$version" ]]; then
    package_with_version="${repository_name}=${version}"
  fi

  if [[ -n "$version" ]]; then
    echo -e "Setting up composer for Magento using distro $edition using v$version"
  else
    echo -e "Setting up composer for Magento using distro $edition"
  fi

  if [[ $WARDEN == 1 ]]; then
    cd "$name"
    warden env-init $name magento2
    warden env up
    $COMPOSER_CLI create-project --no-install --stability dev --prefer-source --repository="$repository_url" "$package_with_version" /tmp/magento
    $RSYNC_CLI -a /tmp/magento/ /var/www/html/
  else
    $COMPOSER_CLI create-project --no-install --stability dev --prefer-source --repository="$repository_url" "$package_with_version" "$name"
    cd "$name"
  fi

  echo "Adjusting composer settings to allow dev packages"
  $COMPOSER_CLI config minimum-stability dev
  $COMPOSER_CLI config prefer-stable true
  $COMPOSER_CLI config allow-plugins.cweagans/composer-patches true

  echo "Setting up local composer folder"
  mkdir -p package-source
  $COMPOSER_CLI config repositories.local-packages path "package-source/*/*"

  echo "Setting up default plugins"
  $COMPOSER_CLI require --no-update mage-os/theme-adminhtml-m137 cweagans/composer-patches yireo/magento2-theme-commands community-engineering/language-nl_nl
  $COMPOSER_CLI require --no-update --dev avstudnitz/scopehint2 spatie/ray

  echo "Running installation.. Enjoy a cup of coffee in the meantime"
  $COMPOSER_CLI install
}

function convert_to_mage_os() {
  if ! $COMPOSER_CLI show magento/product-community-edition >/dev/null 2>&1; then
    echo "This is not a Magento Community installation" && exit 1
  fi

  if $COMPOSER_CLI show mage-os/product-community-edition >/dev/null 2>&1; then
    echo "Mage-OS already installed!" && exit 1
  fi

  echo "Consider removing any composer replaces, before starting";
  echo "Consider removing any 3de party moduels that could impact the conversion";
  read -rsn1 -p "When ready, press any key to continue";
  echo "";

  # Setup
  $COMPOSER_CLI config repositories.0 composer https://repo.mage-os.org/
  $COMPOSER_CLI require mage-os/product-community-edition --no-update
  $COMPOSER_CLI remove magento/product-community-edition magento/composer-dependency-version-audit-plugin magento/composer-root-update-plugin --no-update
  $COMPOSER_CLI remove sebastian/comparator --dev --no-update # remove if present

  $COMPOSER_CLI config allow-plugins.'mage-os/*' true
  rm -rf vendor

  # Install
  $COMPOSER_CLI update --no-plugins --with-all-dependencies
  mage_purge # Cleanup caches
  $MAGENTO_CLI s:up
}

function mage_new_in_folder() {
  if [[ ! -d package-source ]]; then
    mkdir package-source
  fi

  read -e -p "Create in package-source as local composer package? [y/N] "
  echo ""
  if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
    echo "package-source";
  else
    echo $1
  fi;
}

function mage_new_theme() {
  local application="frontend"
  local default_parrent_theme="Hyva/default"

  read -e -p "Is this a admin theme? [y/N] "
  echo ""
  if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
    local application="adminhtml"
  fi;

  local dest_path=$(mage_new_in_folder "app/design/${application}")

  read -e -p "Theme Name: " theme_name
  if [[ -z "$theme_name" ]]; then echo "The 'Name' can not be empty" && exit 1; fi

  if [[ "$theme_name" == */* ]]; then
    local theme_vendor="${theme_name%%/*}"
    local theme_name="${theme_name#*\/}"
  else
    read -e -p "Theme Vendor: " theme_vendor
    if [[ -z "$theme_vendor" ]]; then echo "The 'vendor' can not be empty" && exit 1; fi
  fi

  read -e -p "Parrent Theme ($default_parrent_theme): " parrent_theme
  if [[ -z "$parrent_theme" ]]; then parrent_theme=$default_parrent_theme; fi

  local theme_vendor="$(echo "$theme_vendor" | tr -d '[:blank:]')"
  local theme_name="$(echo "$theme_name" | tr -d '[:blank:]')"
  local folder_name="${theme_vendor}/$(mage_kebab_case "$theme_name")"

  local dest_path="$dest_path/$folder_name"
  local file_registration="<?php declare(strict_types=1);\n\nuse Magento\Framework\Component\ComponentRegistrar;\n\nComponentRegistrar::register(ComponentRegistrar::THEME, '${application}/${folder_name}', __DIR__);"
  local file_xml="<theme\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:noNamespaceSchemaLocation=\"urn:magento:framework:Config/etc/theme.xsd\"\n>\n\t<title>${theme_vendor} ${theme_name}</title>\n\t<parent>${parrent_theme}</parent>\n</theme>"

  mkdir -p $dest_path
  if [[ $parrent_theme == Hyva/* ]]; then
    mkdir -p $dest_path/web/tailwind
    mage_make_file $dest_path/web/tailwind rsync vendor/hyva-themes/magento2-default-theme/web/tailwind
  fi

  mage_make_file $dest_path/registration.php "${file_registration}"
  mage_make_file $dest_path/theme.xml "${file_xml}"
}

function mage_new_module() {
  local dest_path=$(mage_new_in_folder "app/code")

  read -e -p "Module Name: " module_name
  if [[ -z "$module_name" ]]; then echo "The 'Name' can not be empty" && exit 1; fi

  if [[ "$module_name" == */* ]]; then
    local module_vendor="${module_name%%/*}"
    local module_name="${module_name#*\/}"
  else
    read -e -p "Module Vendor: " module_vendor
    if [[ -z "$module_vendor" ]]; then echo "The 'vendor' can not be empty" && exit 1; fi
  fi

  local module_vendor="$(echo "$module_vendor" | tr -d '[:blank:]')"
  local module_name="$(echo "$module_name" | tr -d '[:blank:]')"
  local folder_name="${module_vendor}/$(mage_kebab_case "$module_name")"

  local dest_path="$dest_path/$folder_name"
  local file_registration="<?php declare(strict_types=1);\n\nuse Magento\Framework\Component\ComponentRegistrar;\n\nComponentRegistrar::register(ComponentRegistrar::MODULE, '${module_vendor}_${module_name}', __DIR__);"
  local file_xml="<?xml version=\"1.0\"?>\n<config\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"\n>\n\t<module name=\"${module_vendor}_${module_name}\">\n\t\t<sequence>\n\t\t\t<module name=\"Magento_Theme\"/>\n\t\t</sequence>\n\t</module>\n</config>"

  mkdir -p $dest_path/etc
  mage_make_file $dest_path/registration.php "${file_registration}"
  mage_make_file $dest_path/etc/module.xml "${file_xml}"
}

function mage_open() {
  local store=$1
  local store_url=$(get_mage_store_uri ${store:-1})
  local admin_path=""

  # Prefetch admin URL data for open steps
  if [[ "$store" == "admin" ]]; then
    local admin_path=$(get_mage_admin_path)
  fi

  if [[ -z "$store_url" ]]; then
    echo "Could not find url for store $store"
  else
    echo -e "Opening: ${store_url}${admin_path}"
    $OPEN_CLI ${store_url}${admin_path}
  fi
}

function mage_open_editor() {
  case $EDITOR in
  "phpstorm")
    echo "Opening PHPStorm.."; phpstorm .
    ;;

  "code" | "code -w" | "code --wait")
    echo "Opening VSCode.."; code .
    ;;

  "zed" | "zed -w" | "zed --wait")
    echo "Opening Zed.."; zed .
    ;;

  "subl" | "subl -w" | "subl --wait")
    echo "Opening Sublime Text.."; subl .
    ;;

  "*")
    echo "No valid EDITOR found"
    ;;
  esac;
}

function mage_open_gitclient() {
  if [ -d .git ]; then
    if command -v github &>/dev/null; then
      echo "Opening Github Desktop.."; github .;
    elif command -v fork &>/dev/null; then
      echo "Opening Fork.."; fork;
    elif command -v gittower &>/dev/null; then
      echo "Opening Gittower.."; gittower;
    fi
  fi
}


function mage_add_patch() {
  local vendor="${1}";
  local patch_src="${@: -1}";
  local patch_name="${@:2:$#-2}";

  if [[ -z "$vendor" ]]; then
    echo "The vendor your patching, Example: magento/module-theme or hyva-themes/magento_theme"
    read -e -p "Vendor Name: " vendor && echo ""
  fi

  if [[ -z "$patch_name" ]]; then
    read -e -p "Patch Name: " patch_name && echo ""
  fi

  if [[ -z "$patch_src" ]]; then
    echo "The source to patches/FOLDER or a git raw url"
    read -e -p "Patch Source: " patch_src && echo ""
  fi

  if [[ ! "$patch_src" =~ ^https:// && "${patch_src: -6}" != ".patch" ]]; then
    patch_src="${patch_src%.*}.patch"
  fi

  # Ensure composer.json is configured to use composer.patches.json
  if ! grep -q '"patches-file": "composer.patches.json"' composer.json;
  then
    $COMPOSER_CLI config extra.patches-file composer.patches.json
  fi

  # Create composer.patches.json if it doesn't exist
  if [[ ! -f "composer.patches.json" ]]; then
    echo '{ "patches": {} }' > composer.patches.json
  fi

  php -r '
    $file = "composer.patches.json";
    $vendor = $argv[1];
    $patch_name = $argv[2];
    $patch_src = $argv[3];

    $json = json_decode(file_get_contents($file), true);

    if (!isset($json["patches"])) {
        $json["patches"] = [];
    }

    if (!isset($json["patches"][$vendor])) {
        $json["patches"][$vendor] = [];
    }

    $json["patches"][$vendor][$patch_name] = $patch_src;

    file_put_contents($file, json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
  ' -- "$vendor" "$patch_name" "$patch_src"

  echo -e "Patch added to composer.patches.json"
}

function mage_new_patch() {
  local module_name=${1}

  if [[ -z "$module_name" ]]; then
    echo "The module you want to patch, Example: magento/module-theme"
    read -e -p "Module Name: " module_name && echo ""
  fi

  local module_src="vendor/${module_name}"

  if [[ ! -d "$module_src" ]]; then
    echo "Can not find $module_src make sure this is the right path" && exit 1;
  fi

  cd $module_src
  git init &> /dev/null
  git add .

  read -rsn1 -p "Make your changes in $module_src when ready, press any key to continue";
  echo "";

  local patch_name
  read -e -p "Patch Name (e.g., my-custom-patch): " patch_name
  if [[ -z "$patch_name" ]]; then
    echo "Patch name cannot be empty."
    return 1
  fi
  local patch_file_path="patches/${$module_name}/${patch_name}"

  local patch_file_dir=$(dirname "../../../$patch_file_path")

  mkdir -p "$patch_file_dir"
  touch "../../../${patch_file_path}.patch"
  git diff > "../../../${patch_file_path}.patch"

  # Cleanup
  git checkout . &> /dev/null
  rm -rf .git
  cd - &> /dev/null

  # Add composer patch setting
  read -p "Add patch to composer.json? [Y/n] "
  echo ""
  if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    # Vendor Folder / Patch Name / Patch Source
    mage_add_patch $module_name "Patch: ${patch_name}" "${patch_file_path}"
  fi;

  echo -e "Patch created in ${patch_file_path}.patch".
  echo "Make sure the patch and settings in composer.json are correct before running composer install"
}

function mage_purge() {
  local cleantasks=(
    'generated/metadata/*'
    'generated/code/*'
    'pub/static/*'
    'var/cache/*'
    'var/composer_home/*'
    'var/page_cache/*'
    'var/view_preprocessed/*'
  );

  for i in "${cleantasks[@]}"; do
    $PURGE_CLI ${i} &
    echo -e " [${GREEN}✓${RESET}] ${i}"
  done

  if command -v $REDIS_CLI >/dev/null 2>&1; then
    $REDIS_CLI flushall > /dev/null 2>&1
    echo -e " [${GREEN}✓${RESET}] Redis caches flushed"
  fi

  if command -v $VARNISH_CLI >/dev/null 2>&1; then
    $VARNISH_CLI 'ban req.url ~ .' > /dev/null 2>&1
    echo -e " [${GREEN}✓${RESET}] Varnish caches flushed"
  fi
}

function mage_add_sample() {
  local pkg_name=""
  if grep -q 'magento/product-community-edition' composer.json; then
    pkg_name='magento/product-community-edition'
  elif grep -q 'magento/product-enterprise-edition' composer.json; then
    pkg_name='magento/product-enterprise-edition'
  elif grep -q 'mage-os/project-community-edition' composer.json; then
    pkg_name='mage-os/project-community-edition'
  else
    echo "Could not determine Magento version from composer.json."
    exit 1
  fi

  local mversion=$(get_composer_pkg_version $pkg_name)
  if [[ -z "$mversion" ]]; then
    echo "Could not determine Magento version from composer."
    exit 1
  fi

  if [[ ! -d "$HOME/.magento-sampledata/$mversion" ]]; then
    git clone -b $mversion git@github.com:magento/magento2-sample-data.git $HOME/.magento-sampledata/$mversion
  fi

  echo -e "Installing $mversion sample data"
  # Lets make sure these folder exist, to prevent them being made as a symlink
  mkdir -p app/code/Magento
  mkdir -p pub/media/catalog/product
  mkdir -p pub/media/downloadable/files
  mkdir -p pub/media/wysiwyg
  touch README.md
  php -f $HOME/.magento-sampledata/$mversion/dev/tools/build-sample-data.php -- --ce-source="$PWD"
  $MAGENTO_CLI setup:upgrade

  # Set theme to Hyva if present
  if $COMPOSER_CLI show hyva-themes/magento2-default-theme >/dev/null 2>&1; then
    if $COMPOSER_CLI show yireo/magento2-theme-commands >/dev/null 2>&1; then
      $MAGENTO_CLI theme:change Hyva/default
    fi

    # Unset default styles from sample data
    $MAGENTO_CLI config:set design/head/includes ""
  fi

  $MAGENTO_CLI indexer:reindex
  $MAGENTO_CLI cache:flush
}

function mage_setup() {
  # If a project name is provided as an argument, change into that directory.
  # If no argument is provided, assume we are already in the project directory.
  if [[ -n "$1" ]]; then
    if [[ -d "$1" ]]; then
      cd "$1"
    else
      echo "Error: Directory '$1' not found."
      exit 1
    fi
  fi

  # Now that we are in the correct directory, check if it's a Magento project.
  if [ ! -e "composer.json" ]; then
    echo "Error: This does not look like a Magento project directory ('composer.json' is missing)."
    exit 1
  fi

  # Set the name based on the current directory.
  local name=$(basename "$(pwd)")

  # Default config
  local url="https://${name}.test/"
  local admin_url="${name//-}_admin"

  local db_host="localhost"
  local db_name="${name}"
  local db_user="root"
  local db_password="root"

  local search_host="localhost"
  local session_redis_host="localhost"
  local backend_redis_server="127.0.0.1"
  local page_redis_server="127.0.0.1"

  if [[ $WARDEN == 1 ]]; then
    local db_host="db"
    local db_name="magento"
    local db_user="magento"
    local db_password="magento"

    local search_host="opensearch"
    local session_redis_host="redis"
    local backend_redis_server="redis"
    local page_redis_server="redis"
  fi

  # Setup db, if not using warden
  if [[ $WARDEN == 0 ]]; then
    if command -v mysql &> /dev/null; then
      echo "Setting up database..."
      mysql -uroot -proot -e "DROP DATABASE IF EXISTS \`${db_name}\`;"
      mysql -uroot -proot -e "CREATE DATABASE \`${db_name}\`;"
    else
      echo "mysql not found!"
      echo "Make sure to create a database before running 'mage setup' again"
      exit 1
    fi
  fi

  # Setup Certificate
  if [[ $VALET == 1 ]]; then
    echo "Securing with Valet..."
    valet secure $name
  fi

  if [[ $WARDEN == 1 ]]; then
    echo "Signing certificate with Warden..."
    warden sign-certificate $name.test
  fi

  echo "Running Magento setup install..."
  $MAGENTO_CLI setup:install \
    --backend-frontname="${admin_url}" \
    --base-url="${url}" \
    --use-rewrites=1 \
    --db-host="${db_host}" \
    --db-name="${db_name}" \
    --db-user="${db_user}" \
    --db-password="${db_password}" \
    --search-engine=opensearch \
    --opensearch-host="${search_host}" \
    --opensearch-port=9200 \
    --opensearch-index-prefix=magento2 \
    --opensearch-enable-auth=0 \
    --opensearch-timeout=15 \
    --session-save=redis \
    --session-save-redis-host="${session_redis_host}" \
    --session-save-redis-db=2 \
    --session-save-redis-max-concurrency=20 \
    --cache-backend=redis \
    --cache-backend-redis-server="${backend_redis_server}" \
    --cache-backend-redis-db=0 \
    --page-cache=redis \
    --page-cache-redis-server="${page_redis_server}" \
    --page-cache-redis-db=1 \
    --admin-firstname="${ADMINNAME}" \
    --admin-lastname="admin" \
    --admin-email="${ADMINEMAIL}" \
    --admin-user="${ADMINNAME}" \
    --admin-password="${ADMINPASS}"

  echo "Setting default values for Store config"
  $MAGENTO_CLI config:set general/store_information/name $name
  $MAGENTO_CLI config:set admin/usage/enabled 0
  $MAGENTO_CLI config:set admin/security/session_lifetime 86400
  $MAGENTO_CLI config:set admin/security/password_lifetime ""
  $MAGENTO_CLI config:set admin/security/password_is_forced 0

  $MAGENTO_CLI deploy:mode:set developer

  echo "Disabling 2FA"
  if grep -q 'Magento_AdminAdobeImsTwoFactorAuth' app/etc/config.php;
  then
    $MAGENTO_CLI module:disable Magento_AdminAdobeImsTwoFactorAuth
  fi
  $MAGENTO_CLI module:disable Magento_TwoFactorAuth

  # Prepare Multi Stores when using Valet
  if [[ $VALET == 1 ]]; then
    {
      echo -e '<?php declare(strict_types=1);\n\nreturn ['
      mage_add_valet_store "$name" "default"
      mage_add_valet_store "store-2" "default2" true
      echo '];'
    } > .valet-env.php
  fi

  # Cleanup root sample files
  mage_cleanup_sample_files
}

case "${@}" in
"version")
  mage_version
  ;;

"help")
  mage_version
  mage_help
  ;;

"self-update")
  cd $(dirname "${BASH_SOURCE}") &&
  rm mage &&
  $GET_CLI https://raw.githubusercontent.com/GrimLink/mage/main/mage &&
  chmod +x mage
  ;;

"info")
  mage_info
  ;;

"modules")
  get_mage_modules
  ;;

"create" | "install")
  echo "No name was given for the magento project, aborting.."
  ;;

"create "*)
  mage_install $2
  mage_setup

  read -p "Add sample data? [y/N] "
  echo ""
  if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
    mage_add_sample
  fi
  ;;

"install "*)
  mage_install $2
  ;;

"setup")
  mage_setup
  ;;

"setup "*)
  mage_setup $2
  ;;

"stores")
  check_has_magerun
  $MAGERUN_CLI sys:store:config:base-url:list --format txt
  ;;

"start")
  mage_open_editor
  mage_open_gitclient
  mage_open admin
  mage_open
  ;;

"open "*)
  mage_open $2;
  ;;

"watch")
  cache_cli="echo cache-clean not installed ( https://github.com/mage2tv/magento-cache-clean ) 'composer global require mage2tv/magento-cache-clean'"
  if command -v vendor/bin/cache-clean.js &> /dev/null; then
    cache_cli="vendor/bin/cache-clean.js --watch"
  elif command -v cache-clean.js &> /dev/null; then
    cache_cli="cache-clean.js --watch"
  fi

  if [[ $WARDEN == 1 ]]; then
    # NOTE: we need to sadly hard code the path,
    # but lucky we can since the warden container is always the same
    warden env exec php-fpm /home/www-data/.composer/vendor/bin/cache-clean.js -w
  else
    $cache_cli
  fi
  ;;

"browser-sync"*)
  store_url=$(get_mage_store_uri ${2:-1})
  files_to_watch="app/**/*.phtml, app/**/*.xml, app/**/*.css, app/**/*.js"

  if [[ -z "$store_url" ]]; then
    echo "Could not find url for store $store"
  else
    npx browser-sync start --proxy ${store_url} --https --files $files_to_watch
  fi
  ;;

"reindex")
  $MAGENTO_CLI indexer:reindex && $MAGENTO_CLI cache:flush
  ;;

"purge")
  mage_purge
  ;;

"new admin")
  read -e -p "Email (${GITEMAIL}) or: " useremail
  read -e -p "Firstname (${GITNAME}) or: " userfirst
  read -e -p "Lastname (admin) or: " userlast
  read -e -p "User name (${ADMINNAME}) or: " username
  read -sp "Password (${ADMINPASS}) or: " userpass

  $MAGENTO_CLI admin:user:create \
    --admin-user="${username:-$ADMINNAME}" \
    --admin-password="${userpass:-$ADMINPASS}" \
    --admin-email="${useremail:-$GITEMAIL}" \
    --admin-firstname="${userfirst:-$GITNAME}" \
    --admin-lastname="${userlast:-"admin"}"
  ;;

"new customer")
  check_has_magerun
  $MAGERUN_CLI customer:create
  ;;

"new theme")
  mage_new_theme
  ;;

"new module")
  mage_new_module
  ;;

"new patch"*)
  mage_new_patch ${@:3}
  ;;

"new i18n"* | "new translate"*)
  src=${3:-.}

  if [[ ! -f "$src/registration.php" ]]; then
    echo "This does not look like a Magento 2 module or theme"
    read -e -p "Are you sure if you want to continue? [y/N] "
    echo ""
    if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
      echo "Running '$MAGENTO_CLI i18n:collect-phrases' in '$src'"
    else
      exit 1
    fi;
  fi

  mkdir -p $src/i18n
  $MAGENTO_CLI i18n:collect-phrases $src -o $src/i18n/temp.csv
  sed -i '' -e 's/^\([^"].*\),\([^"].*\)$/"\1","\2"/' $src/i18n/temp.csv
  sort -o $src/i18n/en_US.csv $src/i18n/temp.csv
  rm $src/i18n/temp.csv
  ;;

"add patch"*)
  mage_add_patch ${@:3}
  ;;

"add sample")
  mage_add_sample
  ;;

"add hyva")
  echo "Make sure you have and license key or access to the gitlab env"
  read -rsn1 -p "When ready, press any key to continue";
  echo "";

  read -p "Is this a production setup (use license)? [N/y]" HYVA_PRODUCTION && echo ""
  read -p "Add Checkout? [Y/n]" HYVA_ADD_CHECKOUT && echo ""
  read -p "Add Commerce? [Y/n]" HYVA_ADD_COMMERCE && echo ""

  if [[ -z "$HYVA_PRODUCTION" ]]; then HYVA_PRODUCTION="No"; fi
  if [[ -z "$HYVA_ADD_CHECKOUT" ]]; then HYVA_ADD_CHECKOUT="Yes"; fi
  if [[ -z "$HYVA_ADD_COMMERCE" ]]; then HYVA_ADD_COMMERCE="Yes"; fi

  mage_add_hyva $HYVA_PRODUCTION

  if [[ ! $HYVA_ADD_CHECKOUT =~ ^[nN]|[nN][oO]$ ]]; then
    echo ""
    mage_add_hyva_checkout
  fi

  if [[ ! $HYVA_ADD_COMMERCE =~ ^[nN]|[nN][oO]$ ]]; then
    echo ""
    mage_add_hyva_commerce $HYVA_PRODUCTION
  fi

  $MAGENTO_CLI s:up

  if $COMPOSER_CLI show yireo/magento2-theme-commands >/dev/null 2>&1; then
    $MAGENTO_CLI theme:change Hyva/default
  fi

  mage_build_hyva

  echo "Done!"
  echo "For more information, see the docs -> https://docs.hyva.io/hyva-themes/getting-started/ "
  ;;

"add checkout" | "add hyva checkout")
  mage_add_hyva_checkout
  ;;

"add hyva commerce")
  mage_add_hyva_commerce
  ;;

"add baldr")
  $COMPOSER_CLI config repositories.siteation/magento2-theme-baldr git git@github.com:Siteation/magento2-theme-baldr.git
  $COMPOSER_CLI require siteation/magento2-theme-baldr
  ;;

"set mage-os")
  convert_to_mage_os
  ;;

"set theme"*)
  SET_THEME_NAME=$3

  if [[ $SET_THEME_NAME == "hyva" ]]; then
    SET_THEME_NAME="Hyva/default"
  fi

  if [[ $SET_THEME_NAME == "baldr" ]]; then
    SET_THEME_NAME="Siteation/baldr"
  fi

  if [[ $SET_THEME_NAME == "breeze" ]]; then
    SET_THEME_NAME="Swissup/breeze-blank"
  fi

  if $COMPOSER_CLI show yireo/magento2-theme-commands > /dev/null 2>&1; then
    $MAGENTO_CLI theme:change $SET_THEME_NAME
    $MAGENTO_CLI cache:flush;
  else
    echo "yireo/magento2-theme-commands is not installed."
  fi
  ;;

"set fpc" | "set fpc "*)
  MAGENTO_FPC=$([[ $3 == "varnish" ]] && echo 2 || echo 1)
  $MAGENTO_CLI config:set system/full_page_cache/caching_application $MAGENTO_FPC
  ;;

"set csp")
  check_has_magerun
  $MAGERUN_CLI config:env:set system/default/csp/policies/storefront/scripts/inline 0
  $MAGERUN_CLI config:env:set system/default/csp/policies/storefront/scripts/eval 0
  $MAGERUN_CLI config:env:set system/default/csp/mode/storefront/report_only 0
  $MAGENTO_CLI app:config:import
  ;;

"log" | "log "*)
  log_file="${2:-debug}"

  case "$log_file" in
    "clear")
      find var/log/ -name "*.log" -delete
      ;;
    "show")
      ls -1 var/log/
      ;;
    *)
      if [ -f "var/log/${log_file}.log" ]; then
        tail -f -n 6 "var/log/${log_file}.log"
      else
        echo "Error: Log file not found: var/log/${log_file}.log"
        echo "Available logs:"
        ls -1 var/log/
      fi
      ;;
  esac
  ;;

"outdated")
  $COMPOSER_CLI outdated --direct --no-dev --ignore symfony/finder --ignore symfony/process --format json > composer-outdated.json
  ;;

"build hyva")
  mage_build_hyva
  ;;

"build" | "build "*)
  default_args="-j 4"
  args=${@:2}
  $MAGENTO_CLI setup:static-content:deploy ${args:-$default_args}
  ;;

"version "* | "help "* | "self-update "*)
  mage_help

  echo -e "\n${BOLD}${RED}No arguments are expected for '$1'!${RESET}"
  ;;

"run" | "run "*)
  check_has_magerun
  $MAGERUN_CLI "${@:2}"
  ;;

*)
  $MAGENTO_CLI "$@"
  ;;
esac

