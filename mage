#!/bin/bash

# Mage is a collection of easy commands and aliases for bin/magento
# For those who hate typing long shell commands

# Global variables
RESET='\033[0m'
BOLD='\033[1m'
ITALIC='\033[3m'
RED='\033[0;31m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'

GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
ADMINNAME="$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
ADMINPASS="admin123$"

WARDEN=0
MAGENTO_CLI="bin/magento"
MAGERUN_CLI=""
REDIS_CLI="redis-cli"
VARNISH_CLI="varnishadm" # We never use varnish on a local machine, and prefer to never use it
COMPOSER_CLI="composer"
OPEN_CLI="xdg-open" # Linux
GET_CLI="wget" # Linux

# OSX
if [[ "$OSTYPE" == "darwin"* ]]; then
  OPEN_CLI="open"
  GET_CLI="curl -O"
fi

# Check if this is the Magento 2 root
if [[ ! -d app/etc ]]; then
  # Allow the following commands to run, even if the folder is not root Magento,
  # if else exit mage
  if [[ $1 != "help" ]] && [[ $1 != "self-update" ]]; then
    echo "This does not look like the Magento 2 root folder, aborting.." && exit 1
  fi
fi

# Magerun
NO_MAGERUN_MSG="Magerun2 is not installed"
if command -v magerun2 &>/dev/null; then
  MAGERUN_CLI="magerun2"
elif command -v n98-magerun2 &>/dev/null; then
  MAGERUN_CLI="n98-magerun2"
fi

# Warden Support
if [ -f .env ] && grep -q "WARDEN_ENV_NAME" .env && [[ ! "$PATH" == /var/www/html* ]]; then
  WARDEN=1
  MAGENTO_CLI="warden env exec php-fpm bin/magento"
  MAGERUN_CLI="warden env exec php-fpm n98-magerun"
  REDIS_CLI="warden env exec redis redis-cli"
  VARNISH_CLI="warden env exec -T varnish varnishadm"
  COMPOSER_CLI="warden env exec php-fpm composer"
fi

function mage_build() {
  local JOBS=4

  # Frontend variables with default values
  local LANGS="en_US nl_NL"
  local DEFAULT_ARGS="$LANGS $JOBS"
  local ARGS=""

  # Admin variables with default values
  local ADMIN_DEFAULT_ARGS="en_US $JOBS"
  local ADMIN_ARGS="en_US"

  for OPTION in "${@}"; do
    if [[ "$OPTION" =~ ^a: ]]; then
      # Extract argument after 'a:' (remove prefix)
      local STRIPPED_OPTION=${OPTION#a:}
      local ADMIN_ARGS="$ADMIN_ARGS $STRIPPED_OPTION"
    else
      local ARGS="$ARGS $OPTION"
    fi
  done

  # If language is not found in ARGS add the default
  if [[ $ARGS != *_* ]]; then
    local ARGS="$LANGS $ARGS"
  fi

  # If Jobs is not found in ARGS add the default
  if [[ "$ARGS" != *"-j"* ]] || [[ "$ARGS" != *"--jobs"* ]]; then
    local ARGS="$ARGS -j $JOBS"
  fi

  # If Jobs is not found in ADMIN_ARGS add the default
  if [[ "$ADMIN_ARGS" != *"-j"* ]] || [[ "$ADMIN_ARGS" != *"--jobs"* ]]; then
    local ADMIN_ARGS="$ADMIN_ARGS -j $JOBS"
  fi

  # If force is found in ARGS add it to both Frontend and Admin args
  if [[ "$ARGS" == *"-f"* ]] || [[ "$ARGS" == *"--force"* ]]; then
    local ADMIN_ARGS="$ADMIN_ARGS -f"
  fi

  # Deploy static content
  $MAGENTO_CLI setup:static-content:deploy -a adminhtml ${ADMIN_ARGS:-$ADMIN_DEFAULT_ARGS} &&
  $MAGENTO_CLI setup:static-content:deploy -a frontend ${ARGS:-$DEFAULT_ARGS}
}

# Helper to format language inputs
function format_arguments() {
  formatted_args=""
  for arg in "$@"; do
    formatted_arg=$(tr '[a-z]' '[A-Z]' <<< "$arg")
    formatted_arg="${formatted_arg// /}"
    formatted_args="${formatted_args},${formatted_arg}"
  done
  formatted_args="${formatted_args:1}"
  echo "$formatted_args"
}

# Get the Magento 2 Base Url
function get_mage_base_uri() {
  local BASEURI="$($MAGENTO_CLI config:show web/secure/base_url)"
  if [[ -z "${BASEURI}" ]]; then
    local BASEURI="$($MAGENTO_CLI config:show web/unsecure/base_url)"
  fi
  echo $BASEURI
}

function mage_add_hyva() {
  echo "Installing Hyva theme..."
  echo "Make sure you have and license key or access to the gitlab env"
  echo "else cancel with Ctrl+C"
  echo ""
  read -p "Is this a production setup (use license)? [N/y] "
  echo ""
  if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
    read -p "License key: " HYVA_KEY && echo ""
    read -p "Packagist url: " HYVA_URL && echo ""

    $COMPOSER_CLI config --auth http-basic.hyva-themes.repo.packagist.com token $HYVA_KEY
    $COMPOSER_CLI config repositories.private-packagist composer https://hyva-themes.repo.packagist.com/$HYVA_URL/
    $COMPOSER_CLI require hyva-themes/magento2-default-theme
  else
    HYVA_REPOS=(
      'hyva-themes/magento2-theme-module'
      'hyva-themes/magento2-reset-theme'
      'hyva-themes/magento2-email-module'
      'hyva-themes/magento2-default-theme'
      'hyva-themes/magento2-compat-module-fallback'
      'hyva-themes/magento2-theme-fallback'
      'hyva-themes/magento2-luma-checkout'
    );

    for i in "${HYVA_REPOS[@]}"; do
      $COMPOSER_CLI config repositories.${i} git git@gitlab.hyva.io:${i}.git
    done

    $COMPOSER_CLI config repositories.hyva-themes/magento2-graphql-tokens git git@github.com:hyva-themes/magento2-graphql-tokens.git
    $COMPOSER_CLI require hyva-themes/magento2-luma-checkout --prefer-source
    $COMPOSER_CLI require hyva-themes/magento2-default-theme --prefer-source
  fi

  $MAGENTO_CLI config:set customer/captcha/enable 0
  $MAGENTO_CLI s:up

  if composer show yireo/magento2-theme-commands >/dev/null 2>&1; then
    $MAGENTO_CLI theme:change Hyva/default
  fi

  echo "Done!"
  echo "Navigate to the Content > Design > Configuration admin section to activate the theme"
  echo ""
  echo "For more see the docs -> https://docs.hyva.io/hyva-themes/getting-started/ "
}

function mage_add_checkout() {
  echo "Installing Hyva checkout..."
  echo "Make sure you have and license key or access to the gitlab env"
  echo "else cancel with Ctrl+C"
  echo ""
  read -p "Is this a production setup (use license)? [N/y] "
  echo ""
  if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
    read -p "License key: " HYVA_KEY && echo ""
    read -p "Packagist url: " HYVA_URL && echo ""

    $COMPOSER_CLI config --auth http-basic.hyva-themes.repo.packagist.com token $HYVA_KEY
    $COMPOSER_CLI config repositories.private-packagist composer https://hyva-themes.repo.packagist.com/$HYVA_URL/
    $COMPOSER_CLI require hyva-themes/magento2-hyva-checkout
  else
    $COMPOSER_CLI config repositories.hyva-themes/hyva-checkout git git@gitlab.hyva.io:hyva-checkout/checkout.git
    $COMPOSER_CLI require hyva-themes/magento2-hyva-checkout --prefer-source
  fi
}

MAGE_VERSION="1.20.0"

function mage_version() {
  echo -e "\n${BOLD}Mage ${GREEN}${MAGE_VERSION}${RESET}"
  echo -e "${ITALIC}See https://github.com/GrimLink/mage for the last version${RESET}\n"
}

function mage_help_cmd() {
  echo -e "- ${BLUE}${1}${RESET} (${2})"
}

function mage_help() {
  echo -e "${BOLD}CMD Options:${RESET}"
  mage_help_cmd "self-update"       "Update mage"
  mage_help_cmd "info"              "Show base config for store"
  mage_help_cmd "stores"            "Show all stores"
  mage_help_cmd "open"              "Open default store view"
  mage_help_cmd "open admin"        "Open store admin"
  mage_help_cmd "open [storeview]"  "Open specific store view"
  mage_help_cmd "watch"             "Run cache-clean.js from mageTV"
  mage_help_cmd "browser-sync"      "Run browser-sync on the default store view"
  mage_help_cmd "reindex"           "Reindex all indexes and clear cache"
  mage_help_cmd "purge"             "Purge all static assets"
  mage_help_cmd "new admin"         "Create new admin user"
  mage_help_cmd "new customer"      "Create new customer"
  mage_help_cmd "new theme"         "Create new theme"
  mage_help_cmd "new module"        "Create new module"
  mage_help_cmd "new i18n"          "Create new translations"
  mage_help_cmd "add sample"        "Add sample data"
  mage_help_cmd "add hyva"          "Add Hyvä Theme"
  mage_help_cmd "add checkout"      "Add Hyvä Checkout"
  mage_help_cmd "set theme"         "Set theme"
  mage_help_cmd "set hyva"          "Set Hyvä default theme"
  mage_help_cmd "set baldr"         "Set Siteation Baldr theme"
  mage_help_cmd "set config"        "Set Magento Configs"
  mage_help_cmd "build"             "Run setup:static-content:deploy with common defaultsv"
  mage_help_cmd "run"               "Run magerun2"
  echo -e "\n${ITALIC}Anything else will run ${BLUE}bin/magento${RESET}"
  echo -e "${ITALIC}To see these copmmand again, run ${BLUE}mage help${RESET}"
}

# function new_mage_init() {

# }

# function new_mage_theme() {

# }

# function new_mage_module() {

# }

function mage_add_sample() {
  read -p "What is your Magento base version (sample: 2.4): " MVERSION && echo ""
  if [[ -z "$MVERSION" ]]; then echo "The Magento 2 version is empty, aborting.." && exit 1; fi

  if [[ ! -d "$HOME/.magento-sampledata/$MVERSION" ]]; then
    git clone -b $MVERSION git@github.com:magento/magento2-sample-data.git $HOME/.magento-sampledata/$MVERSION
  fi

  echo -e "Installing $MVERSION sample data"
  # Lets make sure these folder exist, to prevent them being made as a symlink
  mkdir -p app/code/Magento
  mkdir -p pub/media/catalog/product
  mkdir -p pub/media/downloadable/files
  mkdir -p pub/media/wysiwyg
  touch README.md
  php -f $HOME/.magento-sampledata/$MVERSION/dev/tools/build-sample-data.php -- --ce-source="$PWD"
  $MAGENTO_CLI setup:upgrade

  # Set theme to Hyva if present
  if composer show hyva-themes/magento2-default-theme >/dev/null 2>&1; then
    if composer show yireo/magento2-theme-commands >/dev/null 2>&1; then
      $MAGENTO_CLI theme:change Hyva/default
    fi
  fi
}

case "${@}" in
"version" | "-v" | "--version")
  mage_version
  ;;

"help")
  mage_version
  mage_help
  ;;

"self-update")
  cd $(dirname "${BASH_SOURCE}") &&
  rm mage &&
  $GET_CLI https://raw.githubusercontent.com/GrimLink/mage/main/mage &&
  chmod +x mage
  ;;

"info")
  $MAGENTO_CLI --version
  echo -e "Base URI: $(get_mage_base_uri)"
  echo -e "Admin URI: $(grep frontName app/etc/env.php | tail -1 | cut -d ">" -f2 | cut -d "'" -f2)"
  echo -e "Database: $(grep dbname app/etc/env.php | tail -1 | cut -d ">" -f2 | cut -d "'" -f2)"
  $MAGENTO_CLI maintenance:status
  $MAGENTO_CLI deploy:mode:show
  if [[ -n "$MAGENTO_CLI config:show catalog/search/engine" ]]; then
    echo -e "Search Engine: $($MAGENTO_CLI config:show catalog/search/engine)"
  fi
  ;;

"stores")
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI sys:store:config:base-url:list --format txt
  else
    echo $NO_MAGERUN_MSG
  fi
  ;;

"open"*)
  STORE=${2:-1}
  STORE_URL=""
  ADMIN_PATH=""

  # Prefetch admin URL data for open steps
  if [[ "$STORE" == "admin" ]]; then
    ADMIN_PATH=$(grep frontName app/etc/env.php | tail -1 | cut -d '>' -f2 | cut -d '"' -f2 | cut -d "'" -f2)
  fi

  # Fetch the store url
  if [[ -n "$MAGERUN_CLI" ]]; then
    if [[ "$STORE" == "admin" ]]; then
      STORE_URL=$($MAGERUN_CLI sys:store:config:base-url:list --format csv | grep 1 -m 1 | head -1 | cut -d ',' -f3)
    else
      STORE_URL=$($MAGERUN_CLI sys:store:config:base-url:list --format csv | grep $STORE | cut -d ',' -f3)
    fi
  else
    STORE_URL=$(get_mage_base_uri)
  fi

  if [[ -z "$STORE_URL" ]]; then
    echo "Could not find url for store $STORE"
  else
    echo -e "Opening: ${STORE_URL}${ADMIN_PATH}"
    $OPEN_CLI ${STORE_URL}${ADMIN_PATH}
  fi
  ;;

"watch")
  CACHE_CLI="echo cache-clean not installed ( https://github.com/mage2tv/magento-cache-clean ) 'composer global require mage2tv/magento-cache-clean'"
  if command -v vendor/bin/cache-clean.js &> /dev/null; then
    CACHE_CLI="vendor/bin/cache-clean.js --watch"
  elif command -v cache-clean.js &> /dev/null; then
    CACHE_CLI="cache-clean.js --watch"
  fi

  if [[ $WARDEN == 1 ]]; then
    # NOTE: we need to sadly hard code the path,
    # but lukcy we can since the warden container is always the same
    warden env exec php-fpm /home/www-data/.composer/vendor/bin/cache-clean.js -w
  else
    $CACHE_CLI
  fi
  ;;

"browser-sync")
  # TODO: add option to use your own storeview
  STORE_URL=$(get_mage_base_uri)
  # TODO: add option to watch another folder?
  FILES_TO_WATCH="app/**/*.phtml, app/**/*.xml, app/**/*.css, app/**/*.js"

  if [[ -z "$STORE_URL" ]]; then
    echo "Could not find url for store $STORE"
  else
    npx browser-sync start --proxy ${STORE_URL} --https --files $FILES_TO_WATCH
  fi
  ;;

"reindex")
  $MAGENTO_CLI indexer:reindex && $MAGENTO_CLI cache:flush
  ;;

"purge"*)
  CLEANTASKS=(
    'generated/metadata/*'
    'generated/code/*'
    'pub/static/*'
    'var/cache/*'
    'var/composer_home/*'
    'var/page_cache/*'
    'var/view_preprocessed/*'
  );
  PURGE_CMD="rm -rf"

  if [[ $WARDEN == 1 ]]; then
    # Run removal within environment, so that changes are in effect immediately.
    # Changes will get synced back to host on MacOS.
    PURGE_CMD="warden env exec -T php-fpm rm -rf"
  fi;

  for i in "${CLEANTASKS[@]}"; do
    $PURGE_CMD ${i} &
    echo -e " [${GREEN}✓${RESET}] ${i}"
  done

  if command -v $REDIS_CLI >/dev/null 2>&1; then
    $REDIS_CLI flushall > /dev/null 2>&1
    echo -e " [${GREEN}✓${RESET}] Redis caches flushed"
  fi

  if command -v $VARNISH_CLI >/dev/null 2>&1; then
    $VARNISH_CLI 'ban req.url ~ .' > /dev/null 2>&1
    echo -e " [${GREEN}✓${RESET}] Varnish caches flushed"
  fi
  ;;

"new admin")
  read -p "Email (${GITEMAIL}) or: " USEREMAIL
  read -p "Firstname (${GITNAME}) or: " USERFIRST
  read -p "Lastname (admin) or: " USERLAST
  read -p "User name (${ADMINNAME}) or: " USERNAME
  read -sp "Password (${ADMINPASS}) or: " USERPASS

  $MAGENTO_CLI admin:user:create \
    --admin-user="${USERNAME:-$ADMINNAME}" \
    --admin-password="${USERPASS:-$ADMINPASS}" \
    --admin-email="${USEREMAIL:-$GITEMAIL}" \
    --admin-firstname="${USERFIRST:-$GITNAME}" \
    --admin-lastname="${USERLAST:-"admin"}"
  ;;

"new customer")
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI customer:create
  else
    echo $NO_MAGERUN_MSG
  fi
  ;;

"new theme")
  new_mage_theme
  ;;

"new module")
  new_mage_module
  ;;

"new i18n"* | "new translate"*)
  SRC=${3:-.}

  if [[ ! -f "$SRC/registration.php" ]]; then
    echo "This does not look like a Magento 2 module or theme"
    read -p "Are you sure if you want to continue? [y/N] "
    echo ""
    if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
      echo "Running '$MAGENTO_CLI i18n:collect-phrases' in '$SRC'"
    else
      exit 1
    fi;
  fi

  mkdir -p $SRC/i18n
  $MAGENTO_CLI i18n:collect-phrases $SRC -o $SRC/i18n/temp.csv
  sed -i '' -e 's/^\([^"].*\),\([^"].*\)$/"\1","\2"/' $SRC/i18n/temp.csv
  sort -o $SRC/i18n/en_US.csv $SRC/i18n/temp.csv
  rm $SRC/i18n/temp.csv
  ;;

"add sample")
  mage_add_sample
  ;;

"add hyva")
  mage_add_hyva
  ;;

"add checkout")
  mage_add_checkout
  ;;

"set theme"*)
  $MAGENTO_CLI theme:change $3
  $MAGENTO_CLI cache:flush;
  ;;

"set hyva")
  mage set theme Hyva/default
  ;;

"set baldr")
  mage set theme Siteation/baldr
  ;;

"set mode"*)
  DEPLOY_MODE="developer"
  IS_MODE_PROD=0
  ADMIN_SESSION_LIFETIME=86400 # 24h in seconds
  ADMIN_PASSWORD_LIFETIME=0

  if [[ $3 == "production" ]] || [[ $3 == "prod" ]]; then
    DEPLOY_MODE="production --skip-compilation"
    IS_MODE_PROD=1
    ADMIN_SESSION_LIFETIME=43200 # 12h in seconds
    ADMIN_PASSWORD_LIFETIME=90 # days
    echo "Also make sure to run 'mage build' or 'bin/magento setup:static-content:deploy', when running production mode"
  else
    rm -rf generated/metadata/*
    rm -rf generated/code/*
  fi

  $MAGENTO_CLI config:set -q dev/static/sign $IS_MODE_PROD
  $MAGENTO_CLI config:set -q admin/captcha/enable $IS_MODE_PROD
  $MAGENTO_CLI config:set -q admin/security/session_lifetime $ADMIN_SESSION_LIFETIME
  $MAGENTO_CLI config:set -q admin/security/password_lifetime $ADMIN_PASSWORD_LIFETIME
  $MAGENTO_CLI config:set -q admin/security/password_is_forced $IS_MODE_PROD
  $MAGENTO_CLI deploy:mode:set $DEPLOY_MODE
  ;;

"set maintenance"*)
  ALLOWED_IPS=${@:2}

  ;;

"build"*)
  mage_build ${@:2}
  ;;

"run"*)
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI ${@:2}
  else
    echo $NO_MAGERUN_MSG
  fi
  ;;

*)
  $MAGENTO_CLI $@
  ;;
esac

