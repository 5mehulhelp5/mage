#!/bin/bash

# Mage is collection of easy cmd's and alias for bin/magento
# For those that hate typing long shell cmd's

set -e

# Exit early, if not Magento 2
if [[ ! -d app/etc ]]; then
  echo "This does not look like the Magento 2 root folder, aborting.." && exit 1;
fi

# Global variables
RESET='\033[0m'
BOLD='\033[1m'
ITALIC='\033[3m'
RED='\033[0;31m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'

VERSION="1.11.1"
GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
ADMINNAME="$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
ADMINPASS="admin123$"
SKIP="false"

WARDEN=0
MAGENTO_CLI="bin/magento"
MAGERUN_CLI=""
REDIS_CLI="redis-cli"
VARNISH_CLI=""
COMPOSER_CLI="composer"
OPEN_CLI="xdg-open" # Linux
GET_CLI="wget" # Linux

# OSX
if [[ "$OSTYPE" == "darwin"* ]]; then
  OPEN_CLI="open"
  GET_CLI="curl -O"
fi

# Magerun
NO_MAGERUN_MSG="Magerun2 is not installed"
if command -v magerun2 &>/dev/null; then
  MAGERUN_CLI="magerun2"
fi

# Laravel Valet scoped PHP support
if command -v valet &> /dev/null; then
  MAGENTO_CLI="valet php bin/magento"
  COMPOSER_CLI="valet php $(which composer)"
  MAGERUN_CLI="valet php $(which magerun2)"
fi

# Warden Support
if [ -f .env ] && grep --silent 'WARDEN_ENV_NAME' .env; then
  WARDEN=1
  MAGENTO_CLI="warden env exec php-fpm bin/magento"
  MAGERUN_CLI="warden env exec php-fpm n98-magerun"
  REDIS_CLI="warden env exec redis redis-cli"
  VARNISH_CLI="" # TODO
  COMPOSER_CLI="warden env exec php-fpm composer"
fi

function helpMessage() {
  echo ""
  echo -e "${BOLD}Mage ${GREEN}${VERSION}${RESET}"
  echo -e "${ITALIC}See https://github.com/GrimLink/mage for the last version${RESET}\n"
  echo -e "${BOLD}CMD Options:${RESET}"
  echo -e "- ${BLUE}info${RESET} (Show base config for store)"
  echo -e "- ${BLUE}self-update${RESET} (Update mage)"
  echo -e "- ${BLUE}stores${RESET} (Show all stores)"
  echo -e "- ${BLUE}open${RESET} (Open store in browser)"
  echo -e "- ${BLUE}config${RESET} (Set configs for dev env)"
  echo -e "  - [${BLUE}--cache${RESET}/${BLUE}-c${RESET}] Disable any frontend caches"
  echo -e "  - [${BLUE}--admin-session${RESET}/${BLUE}-a${RESET}] Set admin session to a day and no password updates"
  echo -e "  - [${BLUE}--disable-security${RESET}/${BLUE}-s${RESET}] Disable any captcha and 2fa options"
  echo -e "  - [${BLUE}--dev-mode${RESET}/${BLUE}-d${RESET}] Set all settings for local development"
  echo -e "- ${BLUE}watch | devclean${RESET} (Run cache-clean.js from mageTV)"
  echo -e "- ${BLUE}purge${RESET} (Purge all static assets)"
  echo -e "  - [${BLUE}--redis${RESET}/${BLUE}-r${RESET}] Also flush the redis cache"
  echo -e "- ${BLUE}new admin${RESET} (Create new admin user)"
  echo -e "- ${BLUE}new customer${RESET} (Create new customer)"
  echo -e "- ${BLUE}new theme${RESET} (Create new theme in app)"
  echo -e "- ${BLUE}new module${RESET} (Create new module in app)"
  echo -e "- ${BLUE}add sample${RESET} (Add sample data)"
  echo -e "- ${BLUE}add hyva${RESET} (Add hyva theme)"
  echo -e "- ${BLUE}install | i${RESET} (Run composer install or require)"
  echo -e "- ${BLUE}remove | rm${RESET} (Run composer remove)"
  echo -e "- ${BLUE}run${RESET} (Run magerun2)"
  echo -e "\n${ITALIC}Anything else will run ${BLUE}bin/magento${RESET}"
  echo -e "${ITALIC}To see those cmd's just run ${BLUE}mage${RESET}"
}

# Vanila solution to get the Magento 2 base url
function getMageBaseUri() {
  BASEURI="$($MAGENTO_CLI config:show web/secure/base_url)"
  if [[ -z "${BASEURI}" ]]; then
    BASEURI="$($MAGENTO_CLI config:show web/unsecure/base_url)"
  fi

  echo $BASEURI
}

function newMagentoMod() {
  SKIP="false"
  CREATE_SRC="app/code"

  if [[ "$2" == "--yes" ]] || [[ "$2" == "-y" ]]; then SKIP="true"; fi
  if [[ $SKIP == "false" ]]; then
    read -p "Create in package-source (If no app code will be used) ? [Y/n] "
    echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then CREATE_SRC="package-source"; fi
  else
    CREATE_SRC="package-source"
  fi

  read -p "Vendor: " VENDOR
  if [[ -z "$VENDOR" ]]; then echo "The 'Vendor' can not be empty" && exit 1; fi

  read -p "Name: " NAME
  if [[ -z "$NAME" ]]; then echo "The 'Name' can not be empty" && exit 1; fi

  VENDOR="$(echo $VENDOR | tr '[:upper:]' '[:lower:]' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1' | tr -d '[:blank:]')";
  CAMEL_NAME="$(echo $NAME | tr '[:upper:]' '[:lower:]' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1' | tr -d '[:blank:]')";
  LOWER_NAME="$(tr '[:upper:][:blank:]' '[:lower:]-' <<< ${NAME})";

  if [[ $1 == "theme" ]]; then
    echo "No theme templates available yet"
  else
    mkdir -p $CREATE_SRC/$VENDOR/$LOWER_NAME &&
    cd $CREATE_SRC/$VENDOR/$LOWER_NAME &&
    git clone git@github.com:GrimLink/hyva-module-template.git . &&
    rm -rf .git &&

    echo ""
    echo -e "${BLUE}${BOLD}Replace the following values with your own;${RESET}"
    echo -e "${ITALIC}<VENDOR>${RESET} (example: ${ITALIC}${VENDOR}${RESET})"
    echo -e "${ITALIC}<MODULE>${RESET} (example: ${ITALIC}${CAMEL_NAME}${RESET})"
    echo -e "${ITALIC}<MODULE_PKG>${RESET} (example: ${ITALIC}${LOWER_NAME}${RESET})"
  fi
}

case "${@}" in
"--help" | "-h")
  helpMessage
  ;;

"self-update")
  cd $(dirname "${BASH_SOURCE}") &&
  rm mage &&
  $GET_CLI https://raw.githubusercontent.com/GrimLink/mage/main/mage &&
  chmod +x mage
  ;;

"info")
  $MAGENTO_CLI --version
  echo -e "Base URI: $(getMageBaseUri)"
  echo -e "Admin URI: $(grep frontName app/etc/env.php | tail -1 | cut -d ">" -f2 | cut -d "'" -f2)"
  echo -e "Database: $(grep dbname app/etc/env.php | tail -1 | cut -d ">" -f2 | cut -d "'" -f2)"
  $MAGENTO_CLI maintenance:status
  $MAGENTO_CLI deploy:mode:show
  ;;

"stores")
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI sys:store:config:base-url:list --format txt
  else
    echo $NO_MAGERUN_MSG
  fi
  ;;

"open"*)
  STORE=${2:-1}
  STORE_URL=""
  ADMIN_PATH=""

  # Prefetch admin URL data for open steps
  if [[ "$STORE" == "admin" ]]; then
    ADMIN_PATH=$(grep frontName app/etc/env.php | tail -1 | cut -d '>' -f2 | cut -d '"' -f2 | cut -d "'" -f2)
  fi

  # Fetch the store url
  if [[ -n "$MAGERUN_CLI" ]]; then
    if [[ "$STORE" == "admin" ]]; then
      STORE_URL=$($MAGERUN_CLI sys:store:config:base-url:list --format csv | grep 1 -m 1 | head -1 | cut -d ',' -f3)
    else
      STORE_URL=$($MAGERUN_CLI sys:store:config:base-url:list --format csv | grep $STORE | cut -d ',' -f3)
    fi
  else
    STORE_URL=$(getMageBaseUri)
  fi

  if [[ -z "$STORE_URL" ]]; then
    echo "Could not find url for store $STORE"
  else
    echo -e "Opening: ${STORE_URL}${ADMIN_PATH}"
    $OPEN_CLI ${STORE_URL}${ADMIN_PATH}
  fi
  ;;

"config"*)
  CONFIG_RUN_CACHE="false"
  CONFIG_RUN_ADMIN_SESSION="false"
  CONFIG_RUN_DISABLE_SECURITY="false"
  CONFIG_RUN_DEV_MODE="false"
  FLAGS="${@:2}"

  if [[ "$FLAGS" == *"--cache"* || "$FLAGS" =~ ^"-"([^ ]*)"c".* ]]; then
    CONFIG_RUN_CACHE="true"
  fi
  if [[ "$FLAGS" == *"--admin-session"* || "$FLAGS" =~ ^"-"([^ ]*)"a".* ]]; then
    CONFIG_RUN_ADMIN_SESSION="true"
  fi
  if [[ "$FLAGS" == *"--disable-security"* || "$FLAGS" =~ ^"-"([^ ]*)"s".* ]]; then
    CONFIG_RUN_DISABLE_SECURITY="true"
  fi
  if [[ "$FLAGS" == *"--dev-mode"* || "$FLAGS" =~ ^"-"([^ ]*)"d".* ]]; then
    CONFIG_RUN_DEV_MODE="true"
  fi

  if [[ -z "$FLAGS" ]]; then
    CONFIG_RUN_CACHE="true";
    CONFIG_RUN_ADMIN_SESSION="true"
  fi

  if [[ "$CONFIG_RUN_CACHE" == "true" ]]; then
    echo "Disabling frontend caches"
    $MAGENTO_CLI cache:disable layout block_html full_page
  fi
  
  if [[ "$CONFIG_RUN_ADMIN_SESSION" == "true" ]]; then
    echo "Setting session lifetime 86400"
    $MAGENTO_CLI config:set admin/security/session_lifetime 86400
    echo "Setting admin password lifetime ∞"
    $MAGENTO_CLI config:set admin/security/password_lifetime ""
  fi
  if [[ "$CONFIG_RUN_DISABLE_SECURITY" == "true" ]]; then
    $MAGENTO_CLI security:recaptcha:disable-for-user-login
    $MAGENTO_CLI security:recaptcha:disable-for-user-forgot-password
  fi

  if [[ "$CONFIG_RUN_DEV_MODE" == true ]]; then
    $MAGENTO_CLI config:set dev/static/sign 0
    $MAGENTO_CLI deploy:mode:set developer
    echo "Removing Crons, make sure you're not running this on a live environment!"
    read -p "Are your sure? [y/N] "
    echo ""
    if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
      $MAGENTO_CLI cron:remove
    fi;
  fi
  ;;

"watch" | "devclean")
  CACHE_CLI="echo cache-clean not installed ( https://github.com/mage2tv/magento-cache-clean ) `composer global require mage2tv/magento-cache-clean`"
  if command -v vendor/bin/cache-clean.js &> /dev/null; then
    CACHE_CLI="vendor/bin/cache-clean.js --watch"
  elif command -v cache-clean.js &> /dev/null; then
    CACHE_CLI="cache-clean.js --watch"
  fi

  if [[ $WARDEN == 1 ]]; then
    # NOTE: we need to sadly hard code the path,
    # but lukcy we can since the warden container is always the same
    warden env exec php-fpm /home/www-data/.composer/vendor/bin/cache-clean.js -w
  else
    $CACHE_CLI
  fi
  ;;

"purge"*)
  CLEANTASKS=(
    'pub/static/*'
    'generated/*'
    'var/cache/*'
    'var/composer_home/*'
    'var/page_cache/*'
    'var/view_preprocessed/*'
  );

  for i in "${CLEANTASKS[@]}"; do
    if [[ $WARDEN == 1 ]]; then
      # Run removal within environment, so that changes are in effect immediately.
      # Changes will get synced back to host on MacOS.
      warden env exec -T php-fpm rm -rf ${i} &
    else
      rm -rf ${i} &
    fi
    echo -e " [${GREEN}✓${RESET}] ${i}"
  done
  
  if [[ "$2" == "--redis" ]] || [[ "$2" == "-r" ]]; then
    $REDIS_CLI flushall > /dev/null 2>&1
    echo -e " [${GREEN}✓${RESET}] Redis caches flushed"
  fi

  # if [[ "$2" == "--varnish" ]] || [[ "$2" == "-varn" ]]; then
  #   $VARNISH_CLI  > /dev/null 2>&1
  #   echo -e " [${GREEN}✓${RESET}] Varnish caches flushed"
  # fi
  
  ;;

"new admin"*)
  if [[ "$3" == "--yes" ]] || [[ "$3" == "-y" ]]; then
    SKIP="true"
  fi

  if [[ $SKIP == "false" ]]; then
    read -p "Email (${GITEMAIL}) or: " USEREMAIL
    read -p "Firstname (${GITNAME}) or: " USERFIRST
    read -p "Lastname (admin) or: " USERLAST
    read -p "User name (${ADMINNAME}) or: " USERNAME
    read -sp "Password (${ADMINPASS}) or: " USERPASS
  fi

  if [[ -z "$USEREMAIL" ]]; then USEREMAIL="$GITEMAIL"; fi
  if [[ -z "$USERFIRST" ]]; then USERFIRST="$GITNAME"; fi
  if [[ -z "$USERLAST" ]]; then USERLAST="admin"; fi
  if [[ -z "$USERNAME" ]]; then USERNAME="${ADMINNAME}"; fi
  if [[ -z "$USERPASS" ]]; then USERPASS="${ADMINPASS}"; fi

  $MAGENTO_CLI admin:user:create --admin-user="${USERNAME}" \
    --admin-password="${USERPASS}" --admin-email="${USEREMAIL}" \
    --admin-firstname="${USERFIRST}" --admin-lastname="${USERLAST}"
  ;;

"new customer")
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI customer:create
  else
    echo $NO_MAGERUN_MSG
  fi
  ;;

"new theme"*)
  newMagentoMod "theme" "$3"
  ;;

"new module"*)
  newMagentoMod "module" "$3"
  ;;

"new"*)
  echo -e "\n${RED}No ${BOLD}new${RESET}${RED} option given!${RESET}" && helpMessage
  ;;

"add sample")
  read -p "What is your Magento base version (sample: 2.4): " MVERSION && echo ""
  if [[ -z "$MVERSION" ]]; then echo "The Magento 2 version is empty, aborting.." && exit 1; fi

  if [[ ! -d "$HOME/.magento-sampledata/$MVERSION" ]]; then
    git clone -b $MVERSION git@github.com:magento/magento2-sample-data.git $HOME/.magento-sampledata/$MVERSION
  fi
  
  echo -e "Installing $MVERSION sample data"
  # Lets make sure these folder exist, to prevent them being made as a symlink
  mkdir -p app/code/Magento
  mkdir -p pub/media/catalog/product
  mkdir -p pub/media/downloadable/files
  mkdir -p pub/media/wysiwyg
  touch README.md
  # This will also run bin/magento s:up
  php -f $HOME/.magento-sampledata/$MVERSION/dev/tools/build-sample-data.php -- --ce-source="$PWD"
  ;;

"add hyva")
  echo "Installing Hyva theme..."
  echo "Make sure you have and license key or access to the gitlab env"
  echo "else cancel with Ctrl+C"
  echo ""
  read -p "Is this a production setup (use license)? [Y/n] "
  echo ""
  if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    read -p "License key: " HYVA_KEY && echo ""
    read -p "Packagist url: " HYVA_URL && echo ""
    $COMPOSER_CLI config --auth http-basic.hyva-themes.repo.packagist.com token $HYVA_KEY
    $COMPOSER_CLI config repositories.private-packagist composer https://hyva-themes.repo.packagist.com/$HYVA_URL/
    $COMPOSER_CLI require hyva-themes/magento2-default-theme
  else
    $COMPOSER_CLI config repositories.hyva-themes/magento2-theme-module git git@gitlab.hyva.io:hyva-themes/magento2-theme-module.git
    $COMPOSER_CLI config repositories.hyva-themes/magento2-reset-theme git git@gitlab.hyva.io:hyva-themes/magento2-reset-theme.git
    $COMPOSER_CLI config repositories.hyva-themes/magento2-email-module git git@gitlab.hyva.io:hyva-themes/magento2-email-module.git
    $COMPOSER_CLI config repositories.hyva-themes/magento2-default-theme git git@gitlab.hyva.io:hyva-themes/magento2-default-theme.git
    $COMPOSER_CLI config repositories.hyva-themes/magento2-graphql-tokens git git@github.com:hyva-themes/magento2-graphql-tokens.git
    $COMPOSER_CLI config repositories.hyva-themes/magento2-compat-module-fallback git git@gitlab.hyva.io:hyva-themes/magento2-compat-module-fallback.git

    $COMPOSER_CLI require hyva-themes/magento2-default-theme --prefer-source
  fi

  $MAGENTO_CLI config:set customer/captcha/enable 0
  $MAGENTO_CLI s:up

  echo "Done!"
  echo "Navigate to the Content > Design > Configuration admin section to activate the theme"
  echo ""
  echo "For more see the docs -> https://docs.hyva.io/hyva-themes/getting-started/ "
  ;;

"add"*)
  echo -e "\n${RED}No ${BOLD}add${RESET}${RED} option given!${RESET}" && helpMessage
  ;;

"install "* | "i "*)
  if [[ -n ${@:2} ]]; then
    $COMPOSER_CLI require ${@:2}
  else 
    echo "No packages where specified!"
  fi
  ;;

"install" | "i")
  $COMPOSER_CLI install
  ;;

"remove "* | "rm "*)
  if [[ -n ${@:2} ]]; then
    $COMPOSER_CLI remove ${@:2}
  else
    echo "No packages where specified!"
  fi
  ;;

"run"*)
  if [[ -n "$MAGERUN_CLI" ]]; then
    $MAGERUN_CLI ${@:2}
  else
    echo $NO_MAGERUN_MSG
  fi
  ;;

*)
  $MAGENTO_CLI $@
  ;;
esac
